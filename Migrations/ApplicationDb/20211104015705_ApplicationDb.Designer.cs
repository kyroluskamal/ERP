// <auto-generated />
using System;
using ERP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERP.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211104015705_ApplicationDb")]
    partial class ApplicationDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ERP.Data.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ERP.Data.Identity.ApplicationUserUserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("ERP.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte>("IsClientOrStaffOrBoth")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendanceDaysPerEmp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendanceSheetId")
                        .HasColumnType("int");

                    b.Property<int>("ManualAttendenceEachDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceSheetId");

                    b.HasIndex("ManualAttendenceEachDayId");

                    b.ToTable("AttendanceDaysPerEmps");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<byte>("PermissionType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("AttendancePermissions");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_DelayPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendancePermissionId")
                        .HasColumnType("int");

                    b.Property<byte>("LateTime")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AttendancePermissionId");

                    b.ToTable("AttendancePermission_DelayPermissions");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_VacationPerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendancePermissionId")
                        .HasColumnType("int");

                    b.Property<int>("VacationsType_LeaveTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendancePermissionId");

                    b.HasIndex("VacationsType_LeaveTypeId");

                    b.ToTable("AttendancePermission_VacationPerms");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendancePermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttendancePermissionId");

                    b.ToTable("AttendancePermission_notes");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendanceSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Actual_WorkingHours")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<short>("Expected_WorkingHours")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("FiscalYearStartDate")
                        .HasColumnType("Date");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<short>("TotalWorkingDays")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_Absence_Days")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_Delays_Days")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_EarlyLeave_Days")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_EarlyLeave_Min")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_MinDelays")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_Present_Days")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_SignIn_Only")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_SignOut_Only")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_Vacations")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("AttendanceSheets");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.AttendanceFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttendanceFlags");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.AttendanceSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EnableSecondryShift")
                        .HasColumnType("bit");

                    b.Property<byte>("FiscalYearStartDay")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FiscalYearStartMonth")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("AttendanceSettings");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.DaysOff_HolidayLists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("HolidayListsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("HolidayListsId");

                    b.ToTable("DaysOff_HolidayLists");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.HolidayLists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HolidayLists");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.VacationPolicy_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("VacationsPolicy_LeavePolicyId")
                        .HasColumnType("int");

                    b.Property<int>("VacationsType_LeaveTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VacationsPolicy_LeavePolicyId");

                    b.HasIndex("VacationsType_LeaveTypeId");

                    b.ToTable("VacationPolicy_Types");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.VacationsPolicy_LeavePolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacationsPolicy_LeavePolicies");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ApplicableAfter_HowManyDays")
                        .HasColumnType("tinyint");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNeedPermission")
                        .HasColumnType("bit");

                    b.Property<short>("MaxDaysAllowedPerYear")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaximumContinuousDaysApplicable")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacationsType_LeaveTypes");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttandanceEachDay_PresentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("LeaveCount")
                        .HasColumnType("tinyint");

                    b.Property<int>("ManualAttendenceEachDayId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OffDutyTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OnDutyTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SignInTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SignOutTime")
                        .HasColumnType("time");

                    b.Property<int>("VacationsType_LeaveTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManualAttendenceEachDayId");

                    b.HasIndex("VacationsType_LeaveTypeId");

                    b.ToTable("ManualAttandanceEachDay_PresentStatuses");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("Date");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("ManualAttendanceEachDays");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay_VacationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ManualAttendenceEachDayId")
                        .HasColumnType("int");

                    b.Property<short>("VacationCount")
                        .HasColumnType("smallint");

                    b.Property<int>("VacationsType_LeaveTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManualAttendenceEachDayId");

                    b.HasIndex("VacationsType_LeaveTypeId");

                    b.ToTable("ManualAttendanceEachDay_VacationStatus");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay_notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ManualAttendenceEachDayId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManualAttendenceEachDayId");

                    b.ToTable("ManualAttendanceEachDay_notes");
                });

            modelBuilder.Entity("ERP.Models.COC.Business_COC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<string>("CR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxRecordId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("Business_COCs");
                });

            modelBuilder.Entity("ERP.Models.COC.COC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("Money");

                    b.Property<DateTime>("BalanceStartDate")
                        .HasColumnType("Date");

                    b.Property<bool>("ClientType")
                        .HasColumnType("bool");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreditLimit")
                        .HasColumnType("int");

                    b.Property<int>("CreditPeriodLimit")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("HasCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEstimates")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNote")
                        .HasColumnType("bit");

                    b.Property<byte>("InvoicingMethod")
                        .HasColumnType("tinyint");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("COCs");
                });

            modelBuilder.Entity("ERP.Models.COC.COCAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<string>("FlatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("COCAddresses");
                });

            modelBuilder.Entity("ERP.Models.COC.COC_ContactList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("COC_ContactList");
                });

            modelBuilder.Entity("ERP.Models.COC.COC_category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("COC_category");
                });

            modelBuilder.Entity("ERP.Models.COC.Category_PerClient", b =>
                {
                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<int>("COC_categoryId")
                        .HasColumnType("int");

                    b.HasKey("COCId", "COC_categoryId")
                        .IsClustered();

                    b.HasIndex("COC_categoryId");

                    b.ToTable("Category_PerClient");
                });

            modelBuilder.Entity("ERP.Models.COC.ClientNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("ClientNotes");
                });

            modelBuilder.Entity("ERP.Models.COC.ClientStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("ClientStatuses");
                });

            modelBuilder.Entity("ERP.Models.COC.ConstactList_PerCOC", b =>
                {
                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<int>("COC_ContactListId")
                        .HasColumnType("int");

                    b.HasKey("COCId", "COC_ContactListId")
                        .IsClustered();

                    b.HasIndex("COC_ContactListId");

                    b.ToTable("ConstactList_PerCOC");
                });

            modelBuilder.Entity("ERP.Models.COC.Individual_COC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("Individual_COCs");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Field_Choices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChoiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choicevalue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fields_PropertiesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fields_PropertiesId");

                    b.ToTable("Field_Choices");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.FieldsInSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FieldsInSystem");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_Per_Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldsInSystemId")
                        .HasColumnType("int");

                    b.Property<int>("SystemsInERPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldsInSystemId");

                    b.HasIndex("SystemsInERPId");

                    b.ToTable("Fields_Per_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_Properties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EnableAutocomplete")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableQuickSearch")
                        .HasColumnType("bit");

                    b.Property<int>("Fields_validation_Foreach_ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("HasChoices")
                        .HasColumnType("bit");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Fields_validation_Foreach_ServiceId");

                    b.ToTable("Fields_Properties");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_layout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Fields_validation_Foreach_ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("HideField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInNewLine")
                        .HasColumnType("bit");

                    b.Property<byte>("Size")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Fields_validation_Foreach_ServiceId");

                    b.ToTable("Fields_layouts");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_validation_Foreach_Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Fields_Per_ServiceId")
                        .HasColumnType("int");

                    b.Property<byte>("FilterByThisField")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasMinAndMaxDate")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMinAndMaxNumber")
                        .HasColumnType("bit");

                    b.Property<byte>("IsRequired")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsUnique")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ListByThisField")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Fields_Per_ServiceId");

                    b.ToTable("Fields_validation_Foreach_Services");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.MinAndMaxDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Fields_validation_Foreach_ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaxDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("MinDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("Fields_validation_Foreach_ServiceId");

                    b.ToTable("MinAndMaxDate");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.MinAndMaxNumbers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Digit_Value_NotApplicable")
                        .HasColumnType("tinyint");

                    b.Property<int>("Fields_validation_Foreach_ServiceId")
                        .HasColumnType("int");

                    b.Property<short>("MaxNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("MinNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Fields_validation_Foreach_ServiceId");

                    b.ToTable("MinAndMaxNumbers");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FlatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermanentOrPresent")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAddress");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeeNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeNotes");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeePaperImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PaperImages");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeShiftsId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<int>("HolidayListsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("Date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileIMage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VacationsPolicy_LeavePolicyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeLevelId");

                    b.HasIndex("EmployeeShiftsId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("HolidayListsId");

                    b.HasIndex("UserId");

                    b.HasIndex("VacationsPolicy_LeavePolicyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees_customFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int?>("Fields_Per_ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("Fields_Per_ServiceId");

                    b.ToTable("Employees_customFields");
                });

            modelBuilder.Entity("ERP.Models.Employee.Shifts.EmployeeShifts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StandardOrAdvanced")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("EmployeeShifts");
                });

            modelBuilder.Entity("ERP.Models.Employee.Shifts.ShiftsTimeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("BeginningIn")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("BeginningOut")
                        .HasColumnType("time");

                    b.Property<string>("DaysOfWeeks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndingIn")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndingOut")
                        .HasColumnType("time");

                    b.Property<byte>("LateTime")
                        .HasMaxLength(3)
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("OffDutyTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OnDutyTime")
                        .HasColumnType("time");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftsTimeDetails");
                });

            modelBuilder.Entity("ERP.Models.Generals.Actions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("ERP.Models.Generals.AutomaticReminders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("WhenOptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateId");

                    b.HasIndex("WhenOptionId");

                    b.ToTable("AutomaticReminders");
                });

            modelBuilder.Entity("ERP.Models.Generals.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ERP.Models.Generals.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ERP.Models.Generals.EmailsTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailsTemplates");
                });

            modelBuilder.Entity("ERP.Models.Generals.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenedOrClosed")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("ERP.Models.Generals.TaxSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("InclusiveOrExclusive")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("Percent")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("TaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Generals.WhenRemidersSent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WhenOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WhenRemidersSents");
                });

            modelBuilder.Entity("ERP.Models.Items.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ERP.Models.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddByUserId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("HasExpire")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNote")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSpecialOffer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<int>("ItemSKU")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemBrands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandsId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandsId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemBrands");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemDescriptions");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemMainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ItemMainCategories");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemNotes");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemMainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ItemMainCategoryId");

                    b.ToTable("ItemSubCategories");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemTaxSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaxSettingsId");

                    b.ToTable("ItemTaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemVariant_WholeSalePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("DiscountAmount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DiscountType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<decimal>("MinWholeSalePrice")
                        .HasColumnType("Money");

                    b.Property<decimal>("WholeSalePrice")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("ItemVariant_WholeSalePrices");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemVariants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Barcode")
                        .HasColumnType("int");

                    b.Property<bool>("HasRetailPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWholeSalePrice")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("Money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<short>("NotifyLessThan")
                        .HasColumnType("smallint");

                    b.Property<short>("ProfitMargin")
                        .HasColumnType("smallint");

                    b.Property<byte>("ProfitMarginType")
                        .HasColumnType("tinyint");

                    b.Property<short>("TotalAmountInAllInvetroies")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Items.Item_Per_Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemSubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemSubCategoryId");

                    b.ToTable("Item_Per_Subcategories");
                });

            modelBuilder.Entity("ERP.Models.Items.Item_Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitsId");

                    b.ToTable("Item_Units");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemsVariant_RetailPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("DiscountAmount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DiscountType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<decimal>("MinRetailPrice")
                        .HasColumnType("Money");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("ItemsVariant_RetailPrices");
                });

            modelBuilder.Entity("ERP.Models.Items.Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("NumberInRetailSale")
                        .HasColumnType("smallint");

                    b.Property<short>("NumberInWholeSale")
                        .HasColumnType("smallint");

                    b.Property<string>("RetailUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WholeSaleUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Department_description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Department_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Designation_description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.ToTable("Designation_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeLevelName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EmployeeLevels");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeLevel_desc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployessLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployessLevelId");

                    b.ToTable("EmployeeLevel_descs");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeTypes_desc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypesId");

                    b.ToTable("EmployeeTypes_descs");
                });

            modelBuilder.Entity("ERP.Models.SystemsInErp.SystemsInERP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SystemsInERP");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.BankAccount_Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("BankAccountsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountsId");

                    b.ToTable("BankAccount_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.BankAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.Treasuries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Treasuries");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.Treasury_description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TreasuriesId")
                        .HasColumnType("int");

                    b.Property<int>("TreasuryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreasuriesId");

                    b.ToTable("Treasury_Descriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ERP.Data.Identity.ApplicationUserUserRoles", b =>
                {
                    b.HasOne("ERP.Data.Identity.ApplicationUserRole", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.ApplicationUser", "AppUser")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendanceDaysPerEmp", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendanceSheet", "AttendanceSheet")
                        .WithMany()
                        .HasForeignKey("AttendanceSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.ManualAttendanceEachDay", "ManualAttendenceEachDay")
                        .WithMany()
                        .HasForeignKey("ManualAttendenceEachDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceSheet");

                    b.Navigation("ManualAttendenceEachDay");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_DelayPermissions", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendancePermission", "AttendancePermission")
                        .WithMany()
                        .HasForeignKey("AttendancePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendancePermission");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_VacationPerm", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendancePermission", "AttendancePermission")
                        .WithMany()
                        .HasForeignKey("AttendancePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", "VacationsType_LeaveType")
                        .WithMany()
                        .HasForeignKey("VacationsType_LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendancePermission");

                    b.Navigation("VacationsType_LeaveType");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_notes", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendancePermission", "AttendancePermission")
                        .WithMany()
                        .HasForeignKey("AttendancePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendancePermission");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendanceSheet", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.DaysOff_HolidayLists", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.HolidayLists", "HolidayLists")
                        .WithMany()
                        .HasForeignKey("HolidayListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HolidayLists");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.VacationPolicy_Type", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsPolicy_LeavePolicy", "VacationsPolicy_LeavePolicy")
                        .WithMany()
                        .HasForeignKey("VacationsPolicy_LeavePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", "VacationsType_LeaveType")
                        .WithMany()
                        .HasForeignKey("VacationsType_LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VacationsPolicy_LeavePolicy");

                    b.Navigation("VacationsType_LeaveType");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttandanceEachDay_PresentStatus", b =>
                {
                    b.HasOne("ERP.Models.Attendance.ManualAttendanceEachDay", "ManualAttendenceEachDay")
                        .WithMany()
                        .HasForeignKey("ManualAttendenceEachDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", "VacationsType_LeaveType")
                        .WithMany()
                        .HasForeignKey("VacationsType_LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManualAttendenceEachDay");

                    b.Navigation("VacationsType_LeaveType");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay_VacationStatus", b =>
                {
                    b.HasOne("ERP.Models.Attendance.ManualAttendanceEachDay", "ManualAttendenceEachDay")
                        .WithMany()
                        .HasForeignKey("ManualAttendenceEachDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", "VacationsType_LeaveType")
                        .WithMany()
                        .HasForeignKey("VacationsType_LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManualAttendenceEachDay");

                    b.Navigation("VacationsType_LeaveType");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay_notes", b =>
                {
                    b.HasOne("ERP.Models.Attendance.ManualAttendanceEachDay", "ManualAttendenceEachDay")
                        .WithMany()
                        .HasForeignKey("ManualAttendenceEachDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManualAttendenceEachDay");
                });

            modelBuilder.Entity("ERP.Models.COC.Business_COC", b =>
                {
                    b.HasOne("ERP.Models.COC.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.COC.COC", b =>
                {
                    b.HasOne("ERP.Models.Generals.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ERP.Models.COC.COCAddress", b =>
                {
                    b.HasOne("ERP.Models.COC.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.COC.Category_PerClient", b =>
                {
                    b.HasOne("ERP.Models.COC.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.COC.COC_category", "COC_category")
                        .WithMany()
                        .HasForeignKey("COC_categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");

                    b.Navigation("COC_category");
                });

            modelBuilder.Entity("ERP.Models.COC.ClientNotes", b =>
                {
                    b.HasOne("ERP.Models.COC.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.COC.ClientStatus", b =>
                {
                    b.HasOne("ERP.Models.COC.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.COC.ConstactList_PerCOC", b =>
                {
                    b.HasOne("ERP.Models.COC.COC", "COC")
                        .WithMany("COC_Contacts")
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.COC.COC_ContactList", "COC_ContactList")
                        .WithMany("COC_Contacts")
                        .HasForeignKey("COC_ContactListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");

                    b.Navigation("COC_ContactList");
                });

            modelBuilder.Entity("ERP.Models.COC.Individual_COC", b =>
                {
                    b.HasOne("ERP.Models.COC.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Field_Choices", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_Properties", "Fields_Properties")
                        .WithMany()
                        .HasForeignKey("Fields_PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_Properties");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_Per_Service", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.FieldsInSystem", "FieldsInSystem")
                        .WithMany()
                        .HasForeignKey("FieldsInSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.SystemsInErp.SystemsInERP", "SystemsInERP")
                        .WithMany()
                        .HasForeignKey("SystemsInERPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldsInSystem");

                    b.Navigation("SystemsInERP");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_Properties", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_validation_Foreach_Service", "Fields_validation_Foreach_Service")
                        .WithMany()
                        .HasForeignKey("Fields_validation_Foreach_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_validation_Foreach_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_layout", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_validation_Foreach_Service", "Fields_validation_Foreach_Service")
                        .WithMany()
                        .HasForeignKey("Fields_validation_Foreach_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_validation_Foreach_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_validation_Foreach_Service", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_Per_Service", "Fields_Per_Service")
                        .WithMany()
                        .HasForeignKey("Fields_Per_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_Per_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.MinAndMaxDate", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_validation_Foreach_Service", "Fields_validation_Foreach_Service")
                        .WithMany()
                        .HasForeignKey("Fields_validation_Foreach_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_validation_Foreach_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.MinAndMaxNumbers", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_validation_Foreach_Service", "Fields_validation_Foreach_Service")
                        .WithMany()
                        .HasForeignKey("Fields_validation_Foreach_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_validation_Foreach_Service");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeeAddress", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany("EmpAddress")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeeNote", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeePaperImages", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany("PaperImages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees", b =>
                {
                    b.HasOne("ERP.Models.Generals.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ERP.Models.OrganizationalStructure.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId");

                    b.HasOne("ERP.Models.OrganizationalStructure.EmployeeLevel", "EmployeeLevel")
                        .WithMany()
                        .HasForeignKey("EmployeeLevelId");

                    b.HasOne("ERP.Models.Employee.Shifts.EmployeeShifts", null)
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeShiftsId");

                    b.HasOne("ERP.Models.OrganizationalStructure.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.HolidayLists", "HolidayLists")
                        .WithMany()
                        .HasForeignKey("HolidayListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsPolicy_LeavePolicy", "VacationsPolicy_LeavePolicy")
                        .WithMany()
                        .HasForeignKey("VacationsPolicy_LeavePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");

                    b.Navigation("Designation");

                    b.Navigation("EmployeeLevel");

                    b.Navigation("EmployeeType");

                    b.Navigation("HolidayLists");

                    b.Navigation("VacationsPolicy_LeavePolicy");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees_customFields", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.CutomFields.Fields_Per_Service", "Fields_Per_Service")
                        .WithMany()
                        .HasForeignKey("Fields_Per_ServiceId");

                    b.Navigation("Employees");

                    b.Navigation("Fields_Per_Service");
                });

            modelBuilder.Entity("ERP.Models.Employee.Shifts.ShiftsTimeDetails", b =>
                {
                    b.HasOne("ERP.Models.Employee.Shifts.EmployeeShifts", "EmployeeShifts")
                        .WithMany("ShiftsTimeDetails")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeShifts");
                });

            modelBuilder.Entity("ERP.Models.Generals.AutomaticReminders", b =>
                {
                    b.HasOne("ERP.Models.Generals.EmailsTemplates", "EmailsTemplates")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.WhenRemidersSent", "WhenRemidersSent")
                        .WithMany()
                        .HasForeignKey("WhenOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailsTemplates");

                    b.Navigation("WhenRemidersSent");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemBrands", b =>
                {
                    b.HasOne("ERP.Models.Items.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandsId");

                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemDescription", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemNotes", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemSubCategory", b =>
                {
                    b.HasOne("ERP.Models.Items.ItemMainCategory", "ItemMainCategory")
                        .WithMany()
                        .HasForeignKey("ItemMainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemMainCategory");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemTaxSettings", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.TaxSettings", "TaxSettings")
                        .WithMany()
                        .HasForeignKey("TaxSettingsId");

                    b.Navigation("Item");

                    b.Navigation("TaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemVariant_WholeSalePrice", b =>
                {
                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemVariants", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Items.Item_Per_Subcategory", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemSubCategory", "ItemSubCategory")
                        .WithMany()
                        .HasForeignKey("ItemSubCategoryId");

                    b.Navigation("Item");

                    b.Navigation("ItemSubCategory");
                });

            modelBuilder.Entity("ERP.Models.Items.Item_Units", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.Units", "Units")
                        .WithMany()
                        .HasForeignKey("UnitsId");

                    b.Navigation("Item");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemsVariant_RetailPrice", b =>
                {
                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Department", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithOne("Department")
                        .HasForeignKey("ERP.Models.OrganizationalStructure.Department", "EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Department_description", b =>
                {
                    b.HasOne("ERP.Models.OrganizationalStructure.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Designation_description", b =>
                {
                    b.HasOne("ERP.Models.OrganizationalStructure.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeLevel_desc", b =>
                {
                    b.HasOne("ERP.Models.OrganizationalStructure.EmployeeLevel", "EmployeeLevel")
                        .WithMany()
                        .HasForeignKey("EmployessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeLevel");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeTypes_desc", b =>
                {
                    b.HasOne("ERP.Models.OrganizationalStructure.EmployeeType", "EmployeeTypes")
                        .WithMany()
                        .HasForeignKey("EmployeeTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeTypes");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.BankAccount_Description", b =>
                {
                    b.HasOne("ERP.Models.TreasuriesAndBankAccount.BankAccounts", "BankAccounts")
                        .WithMany()
                        .HasForeignKey("BankAccountsId");

                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.Treasury_description", b =>
                {
                    b.HasOne("ERP.Models.TreasuriesAndBankAccount.Treasuries", "Treasuries")
                        .WithMany()
                        .HasForeignKey("TreasuriesId");

                    b.Navigation("Treasuries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ERP.Data.Identity.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ERP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ERP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ERP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERP.Data.Identity.ApplicationUserRole", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ERP.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ERP.Models.COC.COC", b =>
                {
                    b.Navigation("COC_Contacts");
                });

            modelBuilder.Entity("ERP.Models.COC.COC_ContactList", b =>
                {
                    b.Navigation("COC_Contacts");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees", b =>
                {
                    b.Navigation("Department");

                    b.Navigation("EmpAddress");

                    b.Navigation("PaperImages");
                });

            modelBuilder.Entity("ERP.Models.Employee.Shifts.EmployeeShifts", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ShiftsTimeDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
