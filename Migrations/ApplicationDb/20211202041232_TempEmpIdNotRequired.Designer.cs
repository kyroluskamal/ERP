// <auto-generated />
using System;
using ERP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211202041232_TempEmpIdNotRequired")]
    partial class TempEmpIdNotRequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ERP.Data.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ERP.Data.Identity.ApplicationUserUserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("ERP.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte>("IsClientOrStaffOrBoth")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendanceDaysPerEmp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttendanceSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("ManualAttendenceEachDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceSheetId");

                    b.HasIndex("ManualAttendenceEachDayId");

                    b.ToTable("AttendanceDaysPerEmps");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<byte>("PermissionType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("AttendancePermissions");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_DelayPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttendancePermissionId")
                        .HasColumnType("int");

                    b.Property<byte>("LateTime")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AttendancePermissionId");

                    b.ToTable("AttendancePermission_DelayPermissions");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttendancePermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttendancePermissionId");

                    b.ToTable("AttendancePermission_notes");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_VacationPerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttendancePermissionId")
                        .HasColumnType("int");

                    b.Property<int>("VacationsType_LeaveTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendancePermissionId");

                    b.HasIndex("VacationsType_LeaveTypeId");

                    b.ToTable("AttendancePermission_VacationPerms");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendanceSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Actual_WorkingHours")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<short>("Expected_WorkingHours")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("FiscalYearStartDate")
                        .HasColumnType("Date");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<short>("TotalWorkingDays")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_Absence_Days")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_Delays_Days")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_EarlyLeave_Days")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_EarlyLeave_Min")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_MinDelays")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_Present_Days")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_SignIn_Only")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_SignOut_Only")
                        .HasColumnType("smallint");

                    b.Property<short>("Total_Vacations")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("AttendanceSheets");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.AttendanceFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttendanceFlags");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.AttendanceSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("EnableSecondryShift")
                        .HasColumnType("bit");

                    b.Property<byte>("FiscalYearStartDay")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FiscalYearStartMonth")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("AttendanceSettings");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.DaysOff_HolidayLists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("HolidayListsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("HolidayListsId");

                    b.ToTable("DaysOff_HolidayLists");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.HolidayLists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HolidayLists");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.VacationPolicy_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("VacationsPolicy_LeavePolicyId")
                        .HasColumnType("int");

                    b.Property<int>("VacationsType_LeaveTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VacationsPolicy_LeavePolicyId");

                    b.HasIndex("VacationsType_LeaveTypeId");

                    b.ToTable("VacationPolicy_Types");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.VacationsPolicy_LeavePolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacationsPolicy_LeavePolicies");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("ApplicableAfter_HowManyDays")
                        .HasColumnType("tinyint");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNeedPermission")
                        .HasColumnType("bit");

                    b.Property<short>("MaxDaysAllowedPerYear")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaximumContinuousDaysApplicable")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacationsType_LeaveTypes");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttandanceEachDay_PresentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("LeaveCount")
                        .HasColumnType("tinyint");

                    b.Property<int>("ManualAttendenceEachDayId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OffDutyTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OnDutyTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SignInTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SignOutTime")
                        .HasColumnType("time");

                    b.Property<int>("VacationsType_LeaveTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManualAttendenceEachDayId");

                    b.HasIndex("VacationsType_LeaveTypeId");

                    b.ToTable("ManualAttandanceEachDay_PresentStatuses");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("Date");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("ManualAttendanceEachDays");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay_notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ManualAttendenceEachDayId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManualAttendenceEachDayId");

                    b.ToTable("ManualAttendanceEachDay_notes");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay_VacationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ManualAttendenceEachDayId")
                        .HasColumnType("int");

                    b.Property<short>("VacationCount")
                        .HasColumnType("smallint");

                    b.Property<int>("VacationsType_LeaveTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManualAttendenceEachDayId");

                    b.HasIndex("VacationsType_LeaveTypeId");

                    b.ToTable("ManualAttendanceEachDay_VacationStatus");
                });

            modelBuilder.Entity("ERP.Models.Bookings.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("Time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("Time");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ERP.Models.Bookings.Booking_Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("COCId");

                    b.ToTable("Booking_Clients");
                });

            modelBuilder.Entity("ERP.Models.Bookings.Booking_Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ServicesId");

                    b.ToTable("Booking_Services");
                });

            modelBuilder.Entity("ERP.Models.Bookings.Booking_settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingPaymentSettings")
                        .HasColumnType("int");

                    b.Property<int>("BookingTimeDivider")
                        .HasColumnType("int");

                    b.Property<bool>("IsAssignedToStaff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnlyOneService")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Booking_settings");
                });

            modelBuilder.Entity("ERP.Models.Bookings.BookingSettings_AssignedEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Booking_settingsId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Booking_settingsId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("BookingSettings_AssignedEmployee");
                });

            modelBuilder.Entity("ERP.Models.Branches.BranchesAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchesAddresses");
                });

            modelBuilder.Entity("ERP.Models.Branches.BranchesSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClientShared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCostCentersShared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProducShared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplierShared")
                        .HasColumnType("bit");

                    b.Property<bool>("SpcifyAccountbranches")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchesSettings");
                });

            modelBuilder.Entity("ERP.Models.Branches.BusinessBranches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Terlephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkingHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BusinessBranches");
                });

            modelBuilder.Entity("ERP.Models.Branches.Employees_In_Branch", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("Employees_In_Branch");
                });

            modelBuilder.Entity("ERP.Models.Checks.CheckBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankAccountsId")
                        .HasColumnType("int");

                    b.Property<int>("CheckBookNo")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("FirstSerial")
                        .HasColumnType("int");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LastSerial")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountsId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CheckBooks");
                });

            modelBuilder.Entity("ERP.Models.Checks.CheckBook_Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CheckBookId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CheckBookId");

                    b.ToTable("CheckBook_Notes");
                });

            modelBuilder.Entity("ERP.Models.Checks.PayableCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("CheckNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("Date");

                    b.Property<string>("NameOnCheck")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReceivedFromAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PayableChecks");
                });

            modelBuilder.Entity("ERP.Models.Checks.PayableCheck_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PayableCheckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayableCheckId");

                    b.ToTable("PayableCheck_Attachments");
                });

            modelBuilder.Entity("ERP.Models.Checks.PayableCheck_Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayableCheckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayableCheckId");

                    b.ToTable("PayableCheck_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.Checks.ReceivableCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("CheckNo")
                        .HasColumnType("int");

                    b.Property<int>("CollectAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEndorsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("Date");

                    b.Property<string>("NameOnCheck")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReceivedFromAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReceivableChecks");
                });

            modelBuilder.Entity("ERP.Models.Checks.ReceivableCheck_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ReceivableCheckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivableCheckId");

                    b.ToTable("ReceivableCheck_Attachments");
                });

            modelBuilder.Entity("ERP.Models.Checks.ReceivableCheck_Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceivableCheckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivableCheckId");

                    b.ToTable("ReceivableCheck_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.Checks.ReceivableCheck_Endorsement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EndorsedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceivableCheckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivableCheckId");

                    b.ToTable("ReceivableCheck_Endorsements");
                });

            modelBuilder.Entity("ERP.Models.COCs.Business_COC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<string>("CR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxRecordId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("Business_COCs");
                });

            modelBuilder.Entity("ERP.Models.COCs.Category_PerClient", b =>
                {
                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<int>("COC_categoryId")
                        .HasColumnType("int");

                    b.HasKey("COCId", "COC_categoryId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("COCId", "COC_categoryId"));

                    b.HasIndex("COC_categoryId");

                    b.ToTable("Category_PerClient");
                });

            modelBuilder.Entity("ERP.Models.COCs.ClientNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("ClientNotes");
                });

            modelBuilder.Entity("ERP.Models.COCs.ClientStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("ClientStatuses");
                });

            modelBuilder.Entity("ERP.Models.COCs.COC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BalanceStartDate")
                        .HasColumnType("Date");

                    b.Property<bool>("ClientType")
                        .HasColumnType("bit");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreditLimit")
                        .HasColumnType("int");

                    b.Property<int>("CreditPeriodLimit")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("HasCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCustomFields")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEstimates")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNote")
                        .HasColumnType("bit");

                    b.Property<byte>("InvoicingMethod")
                        .HasColumnType("tinyint");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("Money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("COCs");
                });

            modelBuilder.Entity("ERP.Models.COCs.COC_category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("COC_category");
                });

            modelBuilder.Entity("ERP.Models.COCs.COC_ContactList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("COC_ContactList");
                });

            modelBuilder.Entity("ERP.Models.COCs.COC_CustomFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<int>("Fields_Per_ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.HasIndex("Fields_Per_ServiceId");

                    b.ToTable("COC_CustomFields");
                });

            modelBuilder.Entity("ERP.Models.COCs.COCAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<string>("FlatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("COCAddresses");
                });

            modelBuilder.Entity("ERP.Models.COCs.ConstactList_PerCOC", b =>
                {
                    b.Property<int>("COCId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("COC_ContactListId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("COCId", "COC_ContactListId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("COCId", "COC_ContactListId"));

                    b.HasIndex("COC_ContactListId");

                    b.ToTable("ConstactList_PerCOC");
                });

            modelBuilder.Entity("ERP.Models.COCs.Individual_COC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("Individual_COCs");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("Date");

                    b.Property<string>("CreditNoteNumner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailsTemplatesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("ServiceOrItem")
                        .HasColumnType("bit");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailsTemplatesId");

                    b.HasIndex("UserId");

                    b.ToTable("CreditNotes");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("CreditNoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditNoteId");

                    b.ToTable("CreditNote_Attachments");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote_Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditNoteId")
                        .HasColumnType("int");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("Money");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditNoteId");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("CreditNote_Items");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote_Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditNoteId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreditNoteId");

                    b.ToTable("CreditNote_Notes");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote_Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditNoteId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("Money");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditNoteId");

                    b.HasIndex("ServicesId");

                    b.ToTable("CreditNote_Services");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNtotes_Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<int?>("CreditNoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.HasIndex("CreditNoteId");

                    b.ToTable("CreditNtotes_Client");
                });

            modelBuilder.Entity("ERP.Models.CRMSystem.Appointments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("Date");

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("Date");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssignedToStaff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepeated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSharedWithClient")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ERP.Models.CRMSystem.Appointments_Actions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("AppointmentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentsId");

                    b.ToTable("Appointments_Actions");
                });

            modelBuilder.Entity("ERP.Models.CRMSystem.Appointments_Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentsId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentsId");

                    b.ToTable("Appointments_Notes");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Field_Choices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ChoiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choicevalue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fields_PropertiesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fields_PropertiesId");

                    b.ToTable("Field_Choices");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_layout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Fields_validation_Foreach_ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("HideField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInNewLine")
                        .HasColumnType("bit");

                    b.Property<byte>("Size")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Fields_validation_Foreach_ServiceId");

                    b.ToTable("Fields_layouts");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_Per_Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FieldsInSystemId")
                        .HasColumnType("int");

                    b.Property<int>("SystemsInERPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldsInSystemId");

                    b.HasIndex("SystemsInERPId");

                    b.ToTable("Fields_Per_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_Properties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("EnableAutocomplete")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableQuickSearch")
                        .HasColumnType("bit");

                    b.Property<int>("Fields_validation_Foreach_ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("HasChoices")
                        .HasColumnType("bit");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Fields_validation_Foreach_ServiceId");

                    b.ToTable("Fields_Properties");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_validation_Foreach_Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Fields_Per_ServiceId")
                        .HasColumnType("int");

                    b.Property<byte>("FilterByThisField")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasMinAndMaxDate")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMinAndMaxNumber")
                        .HasColumnType("bit");

                    b.Property<byte>("IsRequired")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsUnique")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ListByThisField")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Fields_Per_ServiceId");

                    b.ToTable("Fields_validation_Foreach_Services");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.FieldsInSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FieldsInSystem");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.MinAndMaxDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Fields_validation_Foreach_ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaxDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("MinDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("Fields_validation_Foreach_ServiceId");

                    b.ToTable("MinAndMaxDate");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.MinAndMaxNumbers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("Digit_Value_NotApplicable")
                        .HasColumnType("tinyint");

                    b.Property<int>("Fields_validation_Foreach_ServiceId")
                        .HasColumnType("int");

                    b.Property<short>("MaxNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("MinNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Fields_validation_Foreach_ServiceId");

                    b.ToTable("MinAndMaxNumbers");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FlatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermanentOrPresent")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAddress");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeeNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeNotes");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeePaperImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PaperImages");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeShiftsId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasCustomFields")
                        .HasColumnType("bit");

                    b.Property<int>("HolidayListsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("Date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileIMage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VacationsPolicy_LeavePolicyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeLevelId");

                    b.HasIndex("EmployeeShiftsId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("HolidayListsId");

                    b.HasIndex("UserId");

                    b.HasIndex("VacationsPolicy_LeavePolicyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees_customFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int?>("Fields_Per_ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("Fields_Per_ServiceId");

                    b.ToTable("Employees_customFields");
                });

            modelBuilder.Entity("ERP.Models.Employee.Shifts.EmployeeShifts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StandardOrAdvanced")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("EmployeeShifts");
                });

            modelBuilder.Entity("ERP.Models.Employee.Shifts.ShiftsTimeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<TimeSpan>("BeginningIn")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("BeginningOut")
                        .HasColumnType("time");

                    b.Property<string>("DaysOfWeeks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndingIn")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndingOut")
                        .HasColumnType("time");

                    b.Property<byte>("LateTime")
                        .HasMaxLength(3)
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("OffDutyTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OnDutyTime")
                        .HasColumnType("time");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftsTimeDetails");
                });

            modelBuilder.Entity("ERP.Models.Estimates.Estimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddBy_empId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("Date");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DaysToExpire")
                        .HasColumnType("tinyint");

                    b.Property<int>("EmailsTemplatesId")
                        .HasColumnType("int");

                    b.Property<byte>("EstimateFor")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("HashNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("HashShippingFees")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForClient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForSubCatategory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AddBy_empId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmailsTemplatesId");

                    b.ToTable("Estimates");
                });

            modelBuilder.Entity("ERP.Models.Estimates.Estimates_Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<int?>("EstimateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFromDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("ValidToDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.HasIndex("EstimateId");

                    b.ToTable("Estimates_Clients");
                });

            modelBuilder.Entity("ERP.Models.Estimates.Estimates_Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstimateId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("Estimates_Items");
                });

            modelBuilder.Entity("ERP.Models.Estimates.Estimates_Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstimateId")
                        .HasColumnType("int");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("Money");

                    b.Property<int?>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.HasIndex("ServicesId");

                    b.ToTable("Estimates_Services");
                });

            modelBuilder.Entity("ERP.Models.Estimates.EstimatesAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("EstimateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.ToTable("EstimatesAttachments");
                });

            modelBuilder.Entity("ERP.Models.Estimates.EstimatesNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstimateId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.ToTable("EstimatesNotes");
                });

            modelBuilder.Entity("ERP.Models.Estimates.EstimatesShippingFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstimateId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingFees")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.ToTable("EstimatesShippingFees");
                });

            modelBuilder.Entity("ERP.Models.Estimates.EstimatesStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstimateId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.HasIndex("StatusId");

                    b.ToTable("EstimatesStatuses");
                });

            modelBuilder.Entity("ERP.Models.Generals.Actions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("ERP.Models.Generals.AutomaticReminders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("WhenOptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateId");

                    b.HasIndex("WhenOptionId");

                    b.ToTable("AutomaticReminders");
                });

            modelBuilder.Entity("ERP.Models.Generals.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ERP.Models.Generals.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ERP.Models.Generals.EmailsTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailsTemplates");
                });

            modelBuilder.Entity("ERP.Models.Generals.PaymentMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ERP.Models.Generals.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenedOrClosed")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("ERP.Models.Generals.TaxSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("InclusiveOrExclusive")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("Percent")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("TaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Generals.WhenRemidersSent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("WhenOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WhenRemidersSents");
                });

            modelBuilder.Entity("ERP.Models.Insurance.Insurance_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("InsuranceAgentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceAgentId");

                    b.ToTable("Insurance_Attachments");
                });

            modelBuilder.Entity("ERP.Models.Insurance.Insurance_description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InsuranceAgentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceAgentId");

                    b.ToTable("Insurance_descriptions");
                });

            modelBuilder.Entity("ERP.Models.Insurance.InsuranceAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddedBy_EmployeesId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy_EmployeesId");

                    b.ToTable("InsuranceAgents");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Addition_NoExpire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("Items_NoEpireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Items_NoEpireId");

                    b.ToTable("Addition_NoExpires");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Addition_WithExpire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("Items_withEpireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Items_withEpireId");

                    b.ToTable("Addition_WithExpire");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Inbound_Invent_Requisitions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("Inbound_Invent_Requisitions");
                });

            modelBuilder.Entity("ERP.Models.Inventory.InboundNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Inbound_Invent_RequisitionsId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Inbound_Invent_RequisitionsId");

                    b.ToTable("InboundNotes");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Inventories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddedBy_EmpId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainInventory")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy_EmpId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("ERP.Models.Inventory.InventoryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryAddresses");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Items_NoEpire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("Items_NoEpires");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Items_withEpire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<short>("ExoireDate")
                        .HasMaxLength(4)
                        .HasColumnType("smallint");

                    b.Property<byte>("ExpireMonth")
                        .HasMaxLength(2)
                        .HasColumnType("tinyint");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("Items_withEpires");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Outbound_Invent_Requisitions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("Outbound_Invent_Requisitions");
                });

            modelBuilder.Entity("ERP.Models.Inventory.OutboundNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Outbound_Invent_RequisitionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Outbound_Invent_RequisitionsId");

                    b.ToTable("OutboundNotes");
                });

            modelBuilder.Entity("ERP.Models.Inventory.TransferBetweenInvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmountTransfered")
                        .HasColumnType("int");

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("FromInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<int>("ToInventoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("TransferBetweenInvents");
                });

            modelBuilder.Entity("ERP.Models.Inventory.TransferBetweenInvent_notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferBetweenInventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferBetweenInventId");

                    b.ToTable("TransferBetweenInvent_notes");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Withdraw_NoExpire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("Items_NoEpireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Items_NoEpireId");

                    b.ToTable("Withdraw_NoExpires");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Withdraw_WithExpire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("Items_withEpireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Items_withEpireId");

                    b.ToTable("Withdraw_WithExpires");
                });

            modelBuilder.Entity("ERP.Models.Items.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ERP.Models.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddByUserId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("HasExpire")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNote")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSpecialOffer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ERP.Models.Items.Item_Per_Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemSubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemSubCategoryId");

                    b.ToTable("Item_Per_Subcategories");
                });

            modelBuilder.Entity("ERP.Models.Items.Item_Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitsId");

                    b.ToTable("Item_Units");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemBrands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandsId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandsId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemBrands");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemDescriptions");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemMainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ItemMainCategories");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemNotes");
                });

            modelBuilder.Entity("ERP.Models.Items.Items_CustomFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Fields_Per_ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fields_Per_ServiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("Items_CustomFields");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemMainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ItemMainCategoryId");

                    b.ToTable("ItemSubCategories");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemsVariant_RetailPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("DiscountAmount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DiscountType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<decimal>("MinRetailPrice")
                        .HasColumnType("Money");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("ItemsVariant_RetailPrices");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemTaxSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaxSettingsId");

                    b.ToTable("ItemTaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemVariant_WholeSalePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("DiscountAmount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DiscountType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<decimal>("MinWholeSalePrice")
                        .HasColumnType("Money");

                    b.Property<decimal>("WholeSalePrice")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("ItemVariant_WholeSalePrices");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemVariants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Barcode")
                        .HasColumnType("int");

                    b.Property<bool>("HasRetailPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWholeSalePrice")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemSKU")
                        .HasColumnType("int");

                    b.Property<decimal>("LastPurchasePrice")
                        .HasColumnType("Money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<short>("NotifyLessThan")
                        .HasColumnType("smallint");

                    b.Property<short>("ProfitMargin")
                        .HasColumnType("smallint");

                    b.Property<byte>("ProfitMarginType")
                        .HasColumnType("tinyint");

                    b.Property<short>("TotalAmountInAllInvetroies")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Items.Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("ConversionRate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("smallint")
                        .HasComputedColumnSql("[NumberInWholeSale] * [NumberInRetailSale]");

                    b.Property<short>("NumberInRetailSale")
                        .HasColumnType("smallint");

                    b.Property<short>("NumberInWholeSale")
                        .HasColumnType("smallint");

                    b.Property<string>("RetailUnit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("WholeSaleUnit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("RetailUnit")
                        .IsUnique();

                    b.HasIndex("WholeSaleUnit")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("ERP.Models.Membership.MembershipDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MembershipsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MembershipsId");

                    b.ToTable("MembershipDescriptions");
                });

            modelBuilder.Entity("ERP.Models.Membership.Memberships", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("Date");

                    b.Property<int>("PackagesId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<int>("ToleranceDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.HasIndex("PackagesId");

                    b.HasIndex("SalesInvoicesId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("ERP.Models.NumberingSystem.NumberingSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPrefix")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<byte>("MinimumNubmerOfdigits")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NumberingStyle")
                        .HasColumnType("tinyint");

                    b.Property<string>("StartNumbering")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemsInERPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemsInERPId");

                    b.ToTable("NumberingSettings");
                });

            modelBuilder.Entity("ERP.Models.NumberingSystem.NumberSettings_Prefixes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("Mode")
                        .HasColumnType("tinyint");

                    b.Property<string>("NextNumberPerPrefix")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NumberingSettingsId")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("NumberingSettingsId");

                    b.ToTable("NumberSettings_Prefixes");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Department_description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Department_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Designation_description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.ToTable("Designation_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmployeeLevelName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EmployeeLevels");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeLevel_desc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployessLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployessLevelId");

                    b.ToTable("EmployeeLevel_descs");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmployeeTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeTypes_desc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypesId");

                    b.ToTable("EmployeeTypes_descs");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Contract_Per_Emp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ContractSignDate")
                        .HasColumnType("Date");

                    b.Property<int>("ContractsId")
                        .HasColumnType("int");

                    b.Property<bool>("DurationOrEndDate")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndOfTestPeriodDate")
                        .HasColumnType("Date");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("ContractsId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("Contract_Per_Emps");
                });

            modelBuilder.Entity("ERP.Models.Payroll.ContractDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("Contract_Per_EmpId")
                        .HasColumnType("int");

                    b.Property<bool>("MonthOrYear")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Contract_Per_EmpId");

                    b.ToTable("ContractDurations");
                });

            modelBuilder.Entity("ERP.Models.Payroll.ContractEndDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Contract_Per_EmpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("Contract_Per_EmpId");

                    b.ToTable("ContractEndDates");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Contracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<byte>("PayrollFrequency")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Contracts_Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractsId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryDetuctionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractsId");

                    b.HasIndex("SalaryDetuctionId");

                    b.ToTable("Contracts_Deductions");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Contracts_earns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractsId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryEarningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractsId");

                    b.HasIndex("SalaryEarningId");

                    b.ToTable("Contracts_earns");
                });

            modelBuilder.Entity("ERP.Models.Payroll.ContractsAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Contract_Per_EmpId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Contract_Per_EmpId");

                    b.ToTable("ContractsAttachments");
                });

            modelBuilder.Entity("ERP.Models.Payroll.LoanNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LoansId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoansId");

                    b.ToTable("LoanNotes");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Loans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("Date");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<decimal>("InstallmentAmount")
                        .HasColumnType("Money");

                    b.Property<byte>("InstallmentCount")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("InstallmentStartDate")
                        .HasColumnType("Date");

                    b.Property<bool>("IsPaidFromPaySlip")
                        .HasColumnType("bit");

                    b.Property<byte>("PeriodOfInstallment")
                        .HasColumnType("tinyint");

                    b.Property<int>("TreasuriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("TreasuriesId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Payslips", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("GrossPay")
                        .HasColumnType("Money");

                    b.Property<decimal>("NetPay")
                        .HasColumnType("Money");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("TotalDeduction")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("Payslips");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Payslips_Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PayslipsId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryDetuctionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayslipsId");

                    b.HasIndex("SalaryDetuctionId");

                    b.ToTable("Payslips_Deductions");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Payslips_Earns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PayslipsId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryEarningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayslipsId");

                    b.HasIndex("SalaryEarningId");

                    b.ToTable("Payslips_Earns");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryComponents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AmountOrFormula")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DetuctionOrEarning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SallaryComponents");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryComponentsAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("SalaryComponentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryComponentsId");

                    b.ToTable("SalaryComponentsAmounts");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryComponentsFormula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalaryComponentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryComponentsId");

                    b.ToTable("SalaryComponentsFormulas");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryDetuction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SalaryComponentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryComponentsId");

                    b.ToTable("SalaryDetuction");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryEarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SalaryComponentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryComponentsId");

                    b.ToTable("SalaryEarnings");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryStructures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("PayrollFrequency")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("SalaryStructures");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryStructures_Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SalaryDetuctionId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryStructuresId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryDetuctionId");

                    b.HasIndex("SalaryStructuresId");

                    b.ToTable("SalaryStructures_Deduction");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryStructures_earns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SalaryEarningId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryStructuresId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryEarningId");

                    b.HasIndex("SalaryStructuresId");

                    b.ToTable("SalaryStructures_earns");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.CreditCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<int>("CreditAmount")
                        .HasColumnType("int");

                    b.Property<int>("CreditTypesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.HasIndex("CreditTypesId");

                    b.ToTable("CreditCharges");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.CreditCharge_description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditChargeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreditChargeId");

                    b.ToTable("CreditCharge_descriptions");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.CreditUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<int>("CreditTypesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("Date");

                    b.Property<int>("UsedAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.HasIndex("CreditTypesId");

                    b.ToTable("CreditUsages");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.CreditUsage_description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditUsageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreditUsageId");

                    b.ToTable("CreditUsage_descriptions");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.Packages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("PackageType")
                        .HasColumnType("bit");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<byte>("PeriodType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.Packages_CreditType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditAmount")
                        .HasColumnType("int");

                    b.Property<int>("CreditTypesId")
                        .HasColumnType("int");

                    b.Property<int>("PackagesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditTypesId");

                    b.HasIndex("PackagesId");

                    b.ToTable("Packages_CreditType");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.Packages_Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackagesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackagesId");

                    b.ToTable("Packages_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.Settings.CreditTypeDescriptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditTypesId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreditTypesId");

                    b.ToTable("CreditTypeDescriptions");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.Settings.CreditTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AllowDecimal")
                        .HasColumnType("bit");

                    b.Property<string>("CreditTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CreditTypes");
                });

            modelBuilder.Entity("ERP.Models.PriceLists.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("ERP.Models.PriceLists.PriceList_items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("PriceListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemVariantsId");

                    b.HasIndex("PriceListId");

                    b.ToTable("PriceList_Items");
                });

            modelBuilder.Entity("ERP.Models.PriceLists.PriceList_Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("PriceListId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ServicesId");

                    b.ToTable("priceList_Services");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Items_In_PurchaseInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("InventoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<int>("Purchase_invoicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoriesId");

                    b.HasIndex("ItemVariantsId");

                    b.HasIndex("Purchase_invoicesId");

                    b.ToTable("Items_In_PurchaseInvoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchase_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Purchase_invoicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_invoicesId");

                    b.ToTable("Purchase_Attachments");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchase_invoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDeposits")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPymentTerms")
                        .HasColumnType("bit");

                    b.Property<bool>("HasShippingFees")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlreadyPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartiallyPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecieved")
                        .HasColumnType("bit");

                    b.Property<bool>("ServiceOrItem")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Purchase_invoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchase_Payments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PurchasePaymentMethodsId")
                        .HasColumnType("int");

                    b.Property<int>("Purchase_invoicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchasePaymentMethodsId");

                    b.HasIndex("Purchase_invoicesId");

                    b.ToTable("Purchase_Payments");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurchasePaymentMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PurchasePaymentMethods");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchases_Deposits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepositsType")
                        .HasColumnType("int");

                    b.Property<int>("DepositsValue")
                        .HasColumnType("int");

                    b.Property<int>("Purchase_invoicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_invoicesId");

                    b.ToTable("Purchases_Deposits");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchases_discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<int>("DiscountValue")
                        .HasColumnType("int");

                    b.Property<int>("Purchase_invoicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_invoicesId");

                    b.ToTable("Purchases_discounts");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchases_paymentTerms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Purchase_invoicesId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_invoicesId");

                    b.ToTable("Purchases_paymentTerms");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchases_shippingFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Purchase_invoicesId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingFees")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_invoicesId");

                    b.ToTable("Purchases_shippingFees");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurchasesInvoice_Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Purchase_invoicesId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_invoicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("PurchasesInvoice_Services");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurchaseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Purchase_invoicesId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_invoicesId");

                    b.ToTable("PurchaseStatuses");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Items_in_Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("InventoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<int>("Purchase_RefundRequestsId")
                        .HasColumnType("int");

                    b.Property<int>("RefundedQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoriesId");

                    b.HasIndex("ItemVariantsId");

                    b.HasIndex("Purchase_RefundRequestsId");

                    b.ToTable("Items_in_Refunds");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundedServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Purchase_RefundRequestsId")
                        .HasColumnType("int");

                    b.Property<int>("RefundedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_RefundRequestsId");

                    b.HasIndex("ServicesId");

                    b.ToTable("Purchase_RefundedServices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPymentTerms")
                        .HasColumnType("bit");

                    b.Property<bool>("HasShippingFees")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("Date");

                    b.Property<bool>("ServiceOrItem")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalMoneyIsRefunded")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Purchase_RefundRequests");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Refunds_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Purchase_RefundRequestsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_RefundRequestsId");

                    b.ToTable("Refunds_Attachments");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Refunds_items_ShippingFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Purchase_RefundRequestsId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingFees")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_RefundRequestsId");

                    b.ToTable("Refunds_items_ShippingFees");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Refunds_Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Purchase_RefundRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("Purchase_RefundRequestsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_RefundRequestsId");

                    b.ToTable("Refunds_Notes");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.RefundsStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Purchase_RefundRequestsId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Purchase_RefundRequestsId");

                    b.ToTable("RefundsStatuses");
                });

            modelBuilder.Entity("ERP.Models.Sales.DiscountsPerItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("DiscountType")
                        .HasColumnType("bit");

                    b.Property<int>("ItemsInSalesInvoicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemsInSalesInvoicesId");

                    b.ToTable("DiscountsPerItems");
                });

            modelBuilder.Entity("ERP.Models.Sales.DiscountsPerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("DiscountType")
                        .HasColumnType("bit");

                    b.Property<int>("ServicesInSalesInvicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicesInSalesInvicesId");

                    b.ToTable("DiscountsPerService");
                });

            modelBuilder.Entity("ERP.Models.Sales.ItemsInSalesInvoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Decriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InventoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubtotalPerItem")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("InventoriesId");

                    b.HasIndex("ItemVariantsId");

                    b.HasIndex("SalesInvoicesId");

                    b.ToTable("ItemsInSalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.RefundedItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditNote_ItemsId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemsInSalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreditNote_ItemsId");

                    b.HasIndex("ItemsInSalesInvoicesId");

                    b.ToTable("RefundedItems");
                });

            modelBuilder.Entity("ERP.Models.Sales.RefundedServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditNote_ServicesId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServicesInSalesInvicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditNote_ServicesId");

                    b.HasIndex("ServicesInSalesInvicesId");

                    b.ToTable("RefundedServices");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy_EmpId")
                        .HasColumnType("int");

                    b.Property<byte>("CalculationType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CommissionPeriod")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("Date");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<byte>("ForCatOrItemOrService")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<bool>("TargetType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy_EmpId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_ItemCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommissionsId")
                        .HasColumnType("int");

                    b.Property<int>("ItemSubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionsId");

                    b.HasIndex("ItemSubCategoryId");

                    b.ToTable("Commissions_ItemCats");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommissionsId")
                        .HasColumnType("int");

                    b.Property<int>("ItemVariantsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionsId");

                    b.HasIndex("ItemVariantsId");

                    b.ToTable("Commissions_items");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_Per_employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionsId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("Commissions_Per_employee");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_SerCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommissionsId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceSubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionsId");

                    b.HasIndex("ServiceSubCategoryId");

                    b.ToTable("Commissions_SerCat");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommissionsId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionsId");

                    b.HasIndex("ServicesId");

                    b.ToTable("Commissions_Services");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.CommissionsNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommissionsId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommissionsId");

                    b.ToTable("CommissionsNotes");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoice_AutomaticReminders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AutomaticRemindersId")
                        .HasColumnType("int");

                    b.Property<int>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutomaticRemindersId");

                    b.HasIndex("SalesInvoicesId");

                    b.ToTable("SalesInvoice_AutomaticReminders");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoice_PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SalesInvoice_PaymentStatus");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoice_TotalDsicount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("DiscountType")
                        .HasColumnType("bit");

                    b.Property<int>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicesId");

                    b.ToTable("SalesInvoice_TotalDsicounts");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoicePayments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("CollectedBy_EmpId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("HasAttachment")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDetails")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethodsId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectedBy_EmpId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentMethodsId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("SalesInvoicePayments");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoicePayments_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("SalesInvoicePaymentsID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicePaymentsID");

                    b.ToTable("SalesInvoicePayments_Attachments");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoicePayments_Details", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesInvoicePaymentsID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicePaymentsID");

                    b.ToTable("SalesInvoicePayments_Details");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoicePayments_Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesInvoicePaymentsID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicePaymentsID");

                    b.ToTable("SalesInvoicePayments_Notes");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("COCId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy_UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("Date");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCustomFields")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("HasShippingDetails")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSubscription")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceBumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("Date");

                    b.Property<short>("PaymentDue")
                        .HasColumnType("smallint");

                    b.Property<bool>("SentToClientMethod")
                        .HasColumnType("bit");

                    b.Property<bool>("ServiceOrItem")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.HasIndex("CreatedBy_UserId");

                    b.ToTable("SalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoices_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicesId");

                    b.ToTable("SalesInvoices_Attachments");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoicesStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SalesInvoicesStatuses");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesTerms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Condtions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TermsAndConditions");
                });

            modelBuilder.Entity("ERP.Models.Sales.ServicesInSalesInvices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Decriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubtotalPerItem")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ServicesInSalesInvices");
                });

            modelBuilder.Entity("ERP.Models.Sales.Settings.OtherSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AutoPayFromBalance")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableEstimateModule")
                        .HasColumnType("bit");

                    b.Property<bool>("Disable_Edit_PerItem_InInvoice")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableEstimateManualStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableInvoiceManualStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableMaximumDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManualInvoiceNumber")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumDiscount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OtherSettings");
                });

            modelBuilder.Entity("ERP.Models.Sales.Settings.SalesInvoices_CustomFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Fields_Per_ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fields_Per_ServiceId");

                    b.HasIndex("SalesInvoicesId");

                    b.ToTable("SalesSettings");
                });

            modelBuilder.Entity("ERP.Models.Sales.Settings.ShippingOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fees")
                        .HasColumnType("Money");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TaxSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaxSettingsId");

                    b.ToTable("ShippingOptions");
                });

            modelBuilder.Entity("ERP.Models.Sales.ShippingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingFees")
                        .HasColumnType("Money");

                    b.Property<byte>("ShowingInInvoiceOptions")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicesId");

                    b.ToTable("ShippingDetails");
                });

            modelBuilder.Entity("ERP.Models.Sales.Status_For_EachInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<int>("SalesInvoicesStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicesId");

                    b.HasIndex("SalesInvoicesStatusId");

                    b.ToTable("Statuses_For_EachInvoice");
                });

            modelBuilder.Entity("ERP.Models.Sales.TaxPer_Item_PerInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemsInSalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<int>("TaxSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("TaxValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemsInSalesInvoicesId");

                    b.HasIndex("TaxSettingsId");

                    b.ToTable("TaxPer_Item_PerInvoice");
                });

            modelBuilder.Entity("ERP.Models.Sales.TaxPerService_PerInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ServicesInSalesInvicesId")
                        .HasColumnType("int");

                    b.Property<int>("TaxSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicesInSalesInvicesId");

                    b.HasIndex("TaxSettingsId");

                    b.ToTable("TaxPerService_PerInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.Terms_Per_Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<int>("SalesTermsId")
                        .HasColumnType("int");

                    b.Property<int>("TaxValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicesId");

                    b.HasIndex("SalesTermsId");

                    b.ToTable("Terms_Per_Invoice");
                });

            modelBuilder.Entity("ERP.Models.Service.Service_CustomFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Fields_Per_ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fields_Per_ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Service_CustomFields");
                });

            modelBuilder.Entity("ERP.Models.Service.ServiceDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceDescriptions");
                });

            modelBuilder.Entity("ERP.Models.Service.ServiceMainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ServiceMainCategories");
                });

            modelBuilder.Entity("ERP.Models.Service.ServiceNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceNotes");
                });

            modelBuilder.Entity("ERP.Models.Service.Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddByUser")
                        .HasColumnType("int");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNote")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSpecialOffer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceSubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSubCategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ERP.Models.Service.ServiceSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ServiceMainCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceMainCategoryId");

                    b.ToTable("ServiceSubCategories");
                });

            modelBuilder.Entity("ERP.Models.Service.ServiceTaxSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TaxSettingsId");

                    b.ToTable("ServiceTaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscription_AutomaticReminders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AutomaticRemindersId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutomaticRemindersId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("Subscription_AutomaticReminders");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscription_Invoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("Date");

                    b.Property<int>("SalesInvoicesId")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("SalesInvoicesId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("Subscription_Invoices");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscription_Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("Subscription_Notes");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscription_Terms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SubscriptionsId")
                        .HasColumnType("int");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("Subscription_Terms");
                });

            modelBuilder.Entity("ERP.Models.Subscription.SubscriptionAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("SubscriptionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("SubscriptionAttachments");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscriptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("Date");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisplayDateFromAndTo")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableAutomaticPayment")
                        .HasColumnType("bit");

                    b.Property<byte>("GenerateEvery")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTerms")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("IssueInvoiceBefore")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Occurrences")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTerms")
                        .HasColumnType("int");

                    b.Property<bool>("SendViaEmail")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("COCId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ERP.Models.Supplier.Supplier_ContactList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("SuppliersId");

                    b.ToTable("Supplier_ContactLists");
                });

            modelBuilder.Entity("ERP.Models.Supplier.Supplier_CustomFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Fields_Per_ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fields_Per_ServiceId");

                    b.HasIndex("SuppliersId");

                    b.ToTable("Supplier_CustomFields");
                });

            modelBuilder.Entity("ERP.Models.Supplier.Supplier_notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuppliersId");

                    b.ToTable("Supplier_notes");
                });

            modelBuilder.Entity("ERP.Models.Supplier.SupplierAddresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuppliersId");

                    b.ToTable("SupplierAddresses");
                });

            modelBuilder.Entity("ERP.Models.Supplier.Suppliers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("Money");

                    b.Property<string>("TaxID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ERP.Models.SystemsInErp.SystemsInERP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SystemsInERP");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.BankAccount_Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("BankAccountsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountsId");

                    b.ToTable("BankAccount_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.BankAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BankAccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.Treasuries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Treasuries");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.Treasury_description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TreasuriesId")
                        .HasColumnType("int");

                    b.Property<int>("TreasuryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreasuriesId");

                    b.ToTable("Treasury_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.Settings.WorkOrdersActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("WorkOrdersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrdersId");

                    b.ToTable("WorkOrdersActions");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.Settings.WorkOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("WorkOrdersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrdersId");

                    b.ToTable("WorkOrderStatuses");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Budget")
                        .HasColumnType("Money");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("Date");

                    b.Property<bool>("HasCustomAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCustomFields")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsItAssignedToEmp")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrders_Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("WorkOrdersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrdersId");

                    b.ToTable("WorkOrders_Attachments");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrders_Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkOrdersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrdersId");

                    b.ToTable("WorkOrders_Descriptions");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrdersClients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("COCid")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrdersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("COCid");

                    b.HasIndex("WorkOrdersId");

                    b.ToTable("WorkOrdersClients");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrdersEmployees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrdersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("WorkOrdersId");

                    b.ToTable("WorkOrdersEmployees");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ERP.Data.Identity.ApplicationUserUserRoles", b =>
                {
                    b.HasOne("ERP.Data.Identity.ApplicationUserRole", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.ApplicationUser", "AppUser")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendanceDaysPerEmp", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendanceSheet", "AttendanceSheet")
                        .WithMany()
                        .HasForeignKey("AttendanceSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.ManualAttendanceEachDay", "ManualAttendenceEachDay")
                        .WithMany()
                        .HasForeignKey("ManualAttendenceEachDayId");

                    b.Navigation("AttendanceSheet");

                    b.Navigation("ManualAttendenceEachDay");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_DelayPermissions", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendancePermission", "AttendancePermission")
                        .WithMany()
                        .HasForeignKey("AttendancePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendancePermission");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_notes", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendancePermission", "AttendancePermission")
                        .WithMany()
                        .HasForeignKey("AttendancePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendancePermission");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendancePermission_VacationPerm", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendancePermission", "AttendancePermission")
                        .WithMany()
                        .HasForeignKey("AttendancePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", "VacationsType_LeaveType")
                        .WithMany()
                        .HasForeignKey("VacationsType_LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendancePermission");

                    b.Navigation("VacationsType_LeaveType");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendanceSheet", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.DaysOff_HolidayLists", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.HolidayLists", "HolidayLists")
                        .WithMany()
                        .HasForeignKey("HolidayListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HolidayLists");
                });

            modelBuilder.Entity("ERP.Models.Attendance.AttendenceSettings.VacationPolicy_Type", b =>
                {
                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsPolicy_LeavePolicy", "VacationsPolicy_LeavePolicy")
                        .WithMany()
                        .HasForeignKey("VacationsPolicy_LeavePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", "VacationsType_LeaveType")
                        .WithMany()
                        .HasForeignKey("VacationsType_LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VacationsPolicy_LeavePolicy");

                    b.Navigation("VacationsType_LeaveType");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttandanceEachDay_PresentStatus", b =>
                {
                    b.HasOne("ERP.Models.Attendance.ManualAttendanceEachDay", "ManualAttendenceEachDay")
                        .WithMany()
                        .HasForeignKey("ManualAttendenceEachDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", "VacationsType_LeaveType")
                        .WithMany()
                        .HasForeignKey("VacationsType_LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManualAttendenceEachDay");

                    b.Navigation("VacationsType_LeaveType");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay_notes", b =>
                {
                    b.HasOne("ERP.Models.Attendance.ManualAttendanceEachDay", "ManualAttendenceEachDay")
                        .WithMany()
                        .HasForeignKey("ManualAttendenceEachDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManualAttendenceEachDay");
                });

            modelBuilder.Entity("ERP.Models.Attendance.ManualAttendanceEachDay_VacationStatus", b =>
                {
                    b.HasOne("ERP.Models.Attendance.ManualAttendanceEachDay", "ManualAttendenceEachDay")
                        .WithMany()
                        .HasForeignKey("ManualAttendenceEachDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsType_LeaveType", "VacationsType_LeaveType")
                        .WithMany()
                        .HasForeignKey("VacationsType_LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManualAttendenceEachDay");

                    b.Navigation("VacationsType_LeaveType");
                });

            modelBuilder.Entity("ERP.Models.Bookings.Booking_Clients", b =>
                {
                    b.HasOne("ERP.Models.Bookings.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.Bookings.Booking_Services", b =>
                {
                    b.HasOne("ERP.Models.Bookings.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Service.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ERP.Models.Bookings.BookingSettings_AssignedEmployee", b =>
                {
                    b.HasOne("ERP.Models.Bookings.Booking_settings", "Booking_settings")
                        .WithMany()
                        .HasForeignKey("Booking_settingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking_settings");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Branches.BranchesAddress", b =>
                {
                    b.HasOne("ERP.Models.Branches.BusinessBranches", "BusinessBranches")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessBranches");
                });

            modelBuilder.Entity("ERP.Models.Branches.BranchesSettings", b =>
                {
                    b.HasOne("ERP.Models.Branches.BusinessBranches", "BusinessBranches")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessBranches");
                });

            modelBuilder.Entity("ERP.Models.Branches.Employees_In_Branch", b =>
                {
                    b.HasOne("ERP.Models.Branches.BusinessBranches", "BusinessBranches")
                        .WithMany("Employees_In_Branch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany("Employees_In_Branch")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessBranches");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Checks.CheckBook", b =>
                {
                    b.HasOne("ERP.Models.TreasuriesAndBankAccount.BankAccounts", "BankAccounts")
                        .WithMany()
                        .HasForeignKey("BankAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("BankAccounts");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ERP.Models.Checks.CheckBook_Notes", b =>
                {
                    b.HasOne("ERP.Models.Checks.CheckBook", "CheckBook")
                        .WithMany()
                        .HasForeignKey("CheckBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckBook");
                });

            modelBuilder.Entity("ERP.Models.Checks.PayableCheck_Attachments", b =>
                {
                    b.HasOne("ERP.Models.Checks.PayableCheck", "PayableCheck")
                        .WithMany()
                        .HasForeignKey("PayableCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayableCheck");
                });

            modelBuilder.Entity("ERP.Models.Checks.PayableCheck_Description", b =>
                {
                    b.HasOne("ERP.Models.Checks.PayableCheck", "PayableCheck")
                        .WithMany()
                        .HasForeignKey("PayableCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayableCheck");
                });

            modelBuilder.Entity("ERP.Models.Checks.ReceivableCheck_Attachments", b =>
                {
                    b.HasOne("ERP.Models.Checks.ReceivableCheck", "ReceivableCheck")
                        .WithMany()
                        .HasForeignKey("ReceivableCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivableCheck");
                });

            modelBuilder.Entity("ERP.Models.Checks.ReceivableCheck_Description", b =>
                {
                    b.HasOne("ERP.Models.Checks.ReceivableCheck", "ReceivableCheck")
                        .WithMany()
                        .HasForeignKey("ReceivableCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivableCheck");
                });

            modelBuilder.Entity("ERP.Models.Checks.ReceivableCheck_Endorsement", b =>
                {
                    b.HasOne("ERP.Models.Checks.ReceivableCheck", "ReceivableCheck")
                        .WithMany()
                        .HasForeignKey("ReceivableCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivableCheck");
                });

            modelBuilder.Entity("ERP.Models.COCs.Business_COC", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.COCs.Category_PerClient", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.COCs.COC_category", "COC_category")
                        .WithMany()
                        .HasForeignKey("COC_categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");

                    b.Navigation("COC_category");
                });

            modelBuilder.Entity("ERP.Models.COCs.ClientNotes", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.COCs.ClientStatus", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.COCs.COC", b =>
                {
                    b.HasOne("ERP.Models.Generals.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ERP.Models.COCs.COC_CustomFields", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.CutomFields.Fields_Per_Service", "Fields_Per_Service")
                        .WithMany()
                        .HasForeignKey("Fields_Per_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");

                    b.Navigation("Fields_Per_Service");
                });

            modelBuilder.Entity("ERP.Models.COCs.COCAddress", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.COCs.ConstactList_PerCOC", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany("COC_Contacts")
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.COCs.COC_ContactList", "COC_ContactList")
                        .WithMany("COC_Contacts")
                        .HasForeignKey("COC_ContactListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");

                    b.Navigation("COC_ContactList");
                });

            modelBuilder.Entity("ERP.Models.COCs.Individual_COC", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote", b =>
                {
                    b.HasOne("ERP.Models.Generals.EmailsTemplates", "EmailsTemplates")
                        .WithMany()
                        .HasForeignKey("EmailsTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("EmailsTemplates");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote_Attachments", b =>
                {
                    b.HasOne("ERP.Models.CreditNotes.CreditNote", "CreditNote")
                        .WithMany()
                        .HasForeignKey("CreditNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditNote");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote_Items", b =>
                {
                    b.HasOne("ERP.Models.CreditNotes.CreditNote", "CreditNote")
                        .WithMany()
                        .HasForeignKey("CreditNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditNote");

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote_Notes", b =>
                {
                    b.HasOne("ERP.Models.CreditNotes.CreditNote", "CreditNote")
                        .WithMany()
                        .HasForeignKey("CreditNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditNote");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNote_Services", b =>
                {
                    b.HasOne("ERP.Models.CreditNotes.CreditNote", "CreditNote")
                        .WithMany()
                        .HasForeignKey("CreditNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Service.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditNote");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ERP.Models.CreditNotes.CreditNtotes_Client", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.CreditNotes.CreditNote", "CreditNote")
                        .WithMany()
                        .HasForeignKey("CreditNoteId");

                    b.Navigation("COC");

                    b.Navigation("CreditNote");
                });

            modelBuilder.Entity("ERP.Models.CRMSystem.Appointments", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.CRMSystem.Appointments_Actions", b =>
                {
                    b.HasOne("ERP.Models.CRMSystem.Appointments", "Appointments")
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ERP.Models.CRMSystem.Appointments_Notes", b =>
                {
                    b.HasOne("ERP.Models.CRMSystem.Appointments", "Appointments")
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Field_Choices", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_Properties", "Fields_Properties")
                        .WithMany()
                        .HasForeignKey("Fields_PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_Properties");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_layout", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_validation_Foreach_Service", "Fields_validation_Foreach_Service")
                        .WithMany()
                        .HasForeignKey("Fields_validation_Foreach_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_validation_Foreach_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_Per_Service", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.FieldsInSystem", "FieldsInSystem")
                        .WithMany()
                        .HasForeignKey("FieldsInSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.SystemsInErp.SystemsInERP", "SystemsInERP")
                        .WithMany()
                        .HasForeignKey("SystemsInERPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldsInSystem");

                    b.Navigation("SystemsInERP");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_Properties", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_validation_Foreach_Service", "Fields_validation_Foreach_Service")
                        .WithMany()
                        .HasForeignKey("Fields_validation_Foreach_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_validation_Foreach_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.Fields_validation_Foreach_Service", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_Per_Service", "Fields_Per_Service")
                        .WithMany()
                        .HasForeignKey("Fields_Per_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_Per_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.MinAndMaxDate", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_validation_Foreach_Service", "Fields_validation_Foreach_Service")
                        .WithMany()
                        .HasForeignKey("Fields_validation_Foreach_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_validation_Foreach_Service");
                });

            modelBuilder.Entity("ERP.Models.CutomFields.MinAndMaxNumbers", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_validation_Foreach_Service", "Fields_validation_Foreach_Service")
                        .WithMany()
                        .HasForeignKey("Fields_validation_Foreach_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_validation_Foreach_Service");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeeAddress", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany("EmpAddress")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeeNote", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Employee.EmployeePaperImages", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany("PaperImages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees", b =>
                {
                    b.HasOne("ERP.Models.Generals.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ERP.Models.OrganizationalStructure.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId");

                    b.HasOne("ERP.Models.OrganizationalStructure.EmployeeLevel", "EmployeeLevel")
                        .WithMany()
                        .HasForeignKey("EmployeeLevelId");

                    b.HasOne("ERP.Models.Employee.Shifts.EmployeeShifts", null)
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeShiftsId");

                    b.HasOne("ERP.Models.OrganizationalStructure.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.HolidayLists", "HolidayLists")
                        .WithMany()
                        .HasForeignKey("HolidayListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Attendance.AttendenceSettings.VacationsPolicy_LeavePolicy", "VacationsPolicy_LeavePolicy")
                        .WithMany()
                        .HasForeignKey("VacationsPolicy_LeavePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");

                    b.Navigation("Designation");

                    b.Navigation("EmployeeLevel");

                    b.Navigation("EmployeeType");

                    b.Navigation("HolidayLists");

                    b.Navigation("VacationsPolicy_LeavePolicy");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees_customFields", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.CutomFields.Fields_Per_Service", "Fields_Per_Service")
                        .WithMany()
                        .HasForeignKey("Fields_Per_ServiceId");

                    b.Navigation("Employees");

                    b.Navigation("Fields_Per_Service");
                });

            modelBuilder.Entity("ERP.Models.Employee.Shifts.ShiftsTimeDetails", b =>
                {
                    b.HasOne("ERP.Models.Employee.Shifts.EmployeeShifts", "EmployeeShifts")
                        .WithMany("ShiftsTimeDetails")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeShifts");
                });

            modelBuilder.Entity("ERP.Models.Estimates.Estimate", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("AddBy_empId");

                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.EmailsTemplates", "EmailsTemplates")
                        .WithMany()
                        .HasForeignKey("EmailsTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("EmailsTemplates");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Estimates.Estimates_Client", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Estimates.Estimate", "Estimate")
                        .WithMany()
                        .HasForeignKey("EstimateId");

                    b.Navigation("COC");

                    b.Navigation("Estimate");
                });

            modelBuilder.Entity("ERP.Models.Estimates.Estimates_Items", b =>
                {
                    b.HasOne("ERP.Models.Estimates.Estimate", "Estimate")
                        .WithMany()
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId");

                    b.Navigation("Estimate");

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Estimates.Estimates_Services", b =>
                {
                    b.HasOne("ERP.Models.Estimates.Estimate", "Estimate")
                        .WithMany()
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Service.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesId");

                    b.Navigation("Estimate");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ERP.Models.Estimates.EstimatesAttachments", b =>
                {
                    b.HasOne("ERP.Models.Estimates.Estimate", "Estimate")
                        .WithMany()
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estimate");
                });

            modelBuilder.Entity("ERP.Models.Estimates.EstimatesNotes", b =>
                {
                    b.HasOne("ERP.Models.Estimates.Estimate", "Estimate")
                        .WithMany()
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estimate");
                });

            modelBuilder.Entity("ERP.Models.Estimates.EstimatesShippingFees", b =>
                {
                    b.HasOne("ERP.Models.Estimates.Estimate", "Estimate")
                        .WithMany()
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estimate");
                });

            modelBuilder.Entity("ERP.Models.Estimates.EstimatesStatus", b =>
                {
                    b.HasOne("ERP.Models.Estimates.Estimate", "Estimate")
                        .WithMany()
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Estimate");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ERP.Models.Generals.AutomaticReminders", b =>
                {
                    b.HasOne("ERP.Models.Generals.EmailsTemplates", "EmailsTemplates")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.WhenRemidersSent", "WhenRemidersSent")
                        .WithMany()
                        .HasForeignKey("WhenOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailsTemplates");

                    b.Navigation("WhenRemidersSent");
                });

            modelBuilder.Entity("ERP.Models.Insurance.Insurance_Attachments", b =>
                {
                    b.HasOne("ERP.Models.Insurance.InsuranceAgent", "InsuranceAgent")
                        .WithMany()
                        .HasForeignKey("InsuranceAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceAgent");
                });

            modelBuilder.Entity("ERP.Models.Insurance.Insurance_description", b =>
                {
                    b.HasOne("ERP.Models.Insurance.InsuranceAgent", "InsuranceAgent")
                        .WithMany()
                        .HasForeignKey("InsuranceAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceAgent");
                });

            modelBuilder.Entity("ERP.Models.Insurance.InsuranceAgent", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("AddedBy_EmployeesId");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Addition_NoExpire", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Items_NoEpire", "Items_NoEpire")
                        .WithMany()
                        .HasForeignKey("Items_NoEpireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items_NoEpire");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Addition_WithExpire", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Items_withEpire", "Items_withEpire")
                        .WithMany()
                        .HasForeignKey("Items_withEpireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items_withEpire");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Inbound_Invent_Requisitions", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Inventories", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Inventory.InboundNotes", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Inbound_Invent_Requisitions", "Inbound_Invent_Requisitions")
                        .WithMany()
                        .HasForeignKey("Inbound_Invent_RequisitionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inbound_Invent_Requisitions");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Inventories", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("AddedBy_EmpId");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Inventory.InventoryAddress", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Inventories", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Items_NoEpire", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Inventories", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Items_withEpire", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Inventories", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Outbound_Invent_Requisitions", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Inventories", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Inventory.OutboundNotes", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Outbound_Invent_Requisitions", "Outbound_Invent_Requisitions")
                        .WithMany()
                        .HasForeignKey("Outbound_Invent_RequisitionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outbound_Invent_Requisitions");
                });

            modelBuilder.Entity("ERP.Models.Inventory.TransferBetweenInvent", b =>
                {
                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Inventory.TransferBetweenInvent_notes", b =>
                {
                    b.HasOne("ERP.Models.Inventory.TransferBetweenInvent", "TransferBetweenInvent")
                        .WithMany()
                        .HasForeignKey("TransferBetweenInventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransferBetweenInvent");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Withdraw_NoExpire", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Items_NoEpire", "Items_NoEpire")
                        .WithMany()
                        .HasForeignKey("Items_NoEpireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items_NoEpire");
                });

            modelBuilder.Entity("ERP.Models.Inventory.Withdraw_WithExpire", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Items_withEpire", "Items_withEpire")
                        .WithMany()
                        .HasForeignKey("Items_withEpireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items_withEpire");
                });

            modelBuilder.Entity("ERP.Models.Items.Item_Per_Subcategory", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemSubCategory", "ItemSubCategory")
                        .WithMany()
                        .HasForeignKey("ItemSubCategoryId");

                    b.Navigation("Item");

                    b.Navigation("ItemSubCategory");
                });

            modelBuilder.Entity("ERP.Models.Items.Item_Units", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.Units", "Units")
                        .WithMany()
                        .HasForeignKey("UnitsId");

                    b.Navigation("Item");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemBrands", b =>
                {
                    b.HasOne("ERP.Models.Items.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandsId");

                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemDescription", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemNotes", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Items.Items_CustomFields", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_Per_Service", "Fields_Per_Service")
                        .WithMany()
                        .HasForeignKey("Fields_Per_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_Per_Service");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemSubCategory", b =>
                {
                    b.HasOne("ERP.Models.Items.ItemMainCategory", "ItemMainCategory")
                        .WithMany()
                        .HasForeignKey("ItemMainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemMainCategory");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemsVariant_RetailPrice", b =>
                {
                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemTaxSettings", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.TaxSettings", "TaxSettings")
                        .WithMany()
                        .HasForeignKey("TaxSettingsId");

                    b.Navigation("Item");

                    b.Navigation("TaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemVariant_WholeSalePrice", b =>
                {
                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Items.ItemVariants", b =>
                {
                    b.HasOne("ERP.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Membership.MembershipDescription", b =>
                {
                    b.HasOne("ERP.Models.Membership.Memberships", "Memberships")
                        .WithMany()
                        .HasForeignKey("MembershipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("ERP.Models.Membership.Memberships", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.PointsAndCredits.Packages", "Packages")
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId");

                    b.Navigation("COC");

                    b.Navigation("Packages");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.NumberingSystem.NumberingSettings", b =>
                {
                    b.HasOne("ERP.Models.SystemsInErp.SystemsInERP", "SystemsInERP")
                        .WithMany()
                        .HasForeignKey("SystemsInERPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemsInERP");
                });

            modelBuilder.Entity("ERP.Models.NumberingSystem.NumberSettings_Prefixes", b =>
                {
                    b.HasOne("ERP.Models.NumberingSystem.NumberingSettings", "NumberingSettings")
                        .WithMany()
                        .HasForeignKey("NumberingSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NumberingSettings");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Department", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithOne("Department")
                        .HasForeignKey("ERP.Models.OrganizationalStructure.Department", "EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Department_description", b =>
                {
                    b.HasOne("ERP.Models.OrganizationalStructure.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.Designation_description", b =>
                {
                    b.HasOne("ERP.Models.OrganizationalStructure.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeLevel_desc", b =>
                {
                    b.HasOne("ERP.Models.OrganizationalStructure.EmployeeLevel", "EmployeeLevel")
                        .WithMany()
                        .HasForeignKey("EmployessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeLevel");
                });

            modelBuilder.Entity("ERP.Models.OrganizationalStructure.EmployeeTypes_desc", b =>
                {
                    b.HasOne("ERP.Models.OrganizationalStructure.EmployeeType", "EmployeeTypes")
                        .WithMany()
                        .HasForeignKey("EmployeeTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeTypes");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Contract_Per_Emp", b =>
                {
                    b.HasOne("ERP.Models.Payroll.Contracts", "Contracts")
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contracts");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Payroll.ContractDuration", b =>
                {
                    b.HasOne("ERP.Models.Payroll.Contract_Per_Emp", "Contract_Per_Emp")
                        .WithMany()
                        .HasForeignKey("Contract_Per_EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract_Per_Emp");
                });

            modelBuilder.Entity("ERP.Models.Payroll.ContractEndDate", b =>
                {
                    b.HasOne("ERP.Models.Payroll.Contract_Per_Emp", "Contract_Per_Emp")
                        .WithMany()
                        .HasForeignKey("Contract_Per_EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract_Per_Emp");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Contracts", b =>
                {
                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Contracts_Deduction", b =>
                {
                    b.HasOne("ERP.Models.Payroll.Contracts", "Contracts")
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Payroll.SalaryDetuction", "SalaryDetuction")
                        .WithMany()
                        .HasForeignKey("SalaryDetuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contracts");

                    b.Navigation("SalaryDetuction");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Contracts_earns", b =>
                {
                    b.HasOne("ERP.Models.Payroll.Contracts", "Contracts")
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Payroll.SalaryEarning", "SalaryEarning")
                        .WithMany()
                        .HasForeignKey("SalaryEarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contracts");

                    b.Navigation("SalaryEarning");
                });

            modelBuilder.Entity("ERP.Models.Payroll.ContractsAttachments", b =>
                {
                    b.HasOne("ERP.Models.Payroll.Contract_Per_Emp", "Contract_Per_Emp")
                        .WithMany()
                        .HasForeignKey("Contract_Per_EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract_Per_Emp");
                });

            modelBuilder.Entity("ERP.Models.Payroll.LoanNotes", b =>
                {
                    b.HasOne("ERP.Models.Payroll.Loans", "Loans")
                        .WithMany()
                        .HasForeignKey("LoansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Loans", b =>
                {
                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.TreasuriesAndBankAccount.Treasuries", "Treasuries")
                        .WithMany()
                        .HasForeignKey("TreasuriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Employees");

                    b.Navigation("Treasuries");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Payslips", b =>
                {
                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Payslips_Deduction", b =>
                {
                    b.HasOne("ERP.Models.Payroll.Payslips", "Payslips")
                        .WithMany()
                        .HasForeignKey("PayslipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Payroll.SalaryDetuction", "SalaryDetuction")
                        .WithMany()
                        .HasForeignKey("SalaryDetuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payslips");

                    b.Navigation("SalaryDetuction");
                });

            modelBuilder.Entity("ERP.Models.Payroll.Payslips_Earns", b =>
                {
                    b.HasOne("ERP.Models.Payroll.Payslips", "Payslips")
                        .WithMany()
                        .HasForeignKey("PayslipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Payroll.SalaryEarning", "SalaryEarning")
                        .WithMany()
                        .HasForeignKey("SalaryEarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payslips");

                    b.Navigation("SalaryEarning");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryComponentsAmount", b =>
                {
                    b.HasOne("ERP.Models.Payroll.SalaryComponents", "SalaryComponents")
                        .WithMany()
                        .HasForeignKey("SalaryComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalaryComponents");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryComponentsFormula", b =>
                {
                    b.HasOne("ERP.Models.Payroll.SalaryComponents", "SalaryComponents")
                        .WithMany()
                        .HasForeignKey("SalaryComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalaryComponents");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryDetuction", b =>
                {
                    b.HasOne("ERP.Models.Payroll.SalaryComponents", "SalaryComponents")
                        .WithMany()
                        .HasForeignKey("SalaryComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalaryComponents");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryEarning", b =>
                {
                    b.HasOne("ERP.Models.Payroll.SalaryComponents", "SalaryComponents")
                        .WithMany()
                        .HasForeignKey("SalaryComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalaryComponents");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryStructures_Deduction", b =>
                {
                    b.HasOne("ERP.Models.Payroll.SalaryDetuction", "SalaryDetuction")
                        .WithMany()
                        .HasForeignKey("SalaryDetuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Payroll.SalaryStructures", "SalaryStructures")
                        .WithMany()
                        .HasForeignKey("SalaryStructuresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalaryDetuction");

                    b.Navigation("SalaryStructures");
                });

            modelBuilder.Entity("ERP.Models.Payroll.SalaryStructures_earns", b =>
                {
                    b.HasOne("ERP.Models.Payroll.SalaryEarning", "SalaryEarning")
                        .WithMany()
                        .HasForeignKey("SalaryEarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Payroll.SalaryStructures", "SalaryStructures")
                        .WithMany()
                        .HasForeignKey("SalaryStructuresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalaryEarning");

                    b.Navigation("SalaryStructures");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.CreditCharge", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.PointsAndCredits.Settings.CreditTypes", "CreditTypes")
                        .WithMany()
                        .HasForeignKey("CreditTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");

                    b.Navigation("CreditTypes");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.CreditCharge_description", b =>
                {
                    b.HasOne("ERP.Models.PointsAndCredits.CreditCharge", "CreditCharge")
                        .WithMany()
                        .HasForeignKey("CreditChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCharge");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.CreditUsage", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.PointsAndCredits.Settings.CreditTypes", "CreditTypes")
                        .WithMany()
                        .HasForeignKey("CreditTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COC");

                    b.Navigation("CreditTypes");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.CreditUsage_description", b =>
                {
                    b.HasOne("ERP.Models.PointsAndCredits.CreditUsage", "CreditUsage")
                        .WithMany()
                        .HasForeignKey("CreditUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditUsage");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.Packages_CreditType", b =>
                {
                    b.HasOne("ERP.Models.PointsAndCredits.Settings.CreditTypes", "CreditTypes")
                        .WithMany()
                        .HasForeignKey("CreditTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.PointsAndCredits.Packages", "Packages")
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditTypes");

                    b.Navigation("Packages");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.Packages_Description", b =>
                {
                    b.HasOne("ERP.Models.PointsAndCredits.Packages", "Packages")
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packages");
                });

            modelBuilder.Entity("ERP.Models.PointsAndCredits.Settings.CreditTypeDescriptions", b =>
                {
                    b.HasOne("ERP.Models.PointsAndCredits.Settings.CreditTypes", "CreditTypes")
                        .WithMany()
                        .HasForeignKey("CreditTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditTypes");
                });

            modelBuilder.Entity("ERP.Models.PriceLists.PriceList_items", b =>
                {
                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.PriceLists.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemVariants");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("ERP.Models.PriceLists.PriceList_Services", b =>
                {
                    b.HasOne("ERP.Models.PriceLists.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Service.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Items_In_PurchaseInvoice", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Inventories", "Inventories")
                        .WithMany()
                        .HasForeignKey("InventoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Purchases.Purchase_invoices", "Purchase_invoices")
                        .WithMany()
                        .HasForeignKey("Purchase_invoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventories");

                    b.Navigation("ItemVariants");

                    b.Navigation("Purchase_invoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchase_Attachments", b =>
                {
                    b.HasOne("ERP.Models.Purchases.Purchase_invoices", "Purchase_invoices")
                        .WithMany()
                        .HasForeignKey("Purchase_invoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_invoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchase_invoices", b =>
                {
                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchase_Payments", b =>
                {
                    b.HasOne("ERP.Models.Purchases.PurchasePaymentMethods", "PurchasePaymentMethods")
                        .WithMany()
                        .HasForeignKey("PurchasePaymentMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Purchases.Purchase_invoices", "Purchase_invoices")
                        .WithMany()
                        .HasForeignKey("Purchase_invoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchasePaymentMethods");

                    b.Navigation("Purchase_invoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchases_Deposits", b =>
                {
                    b.HasOne("ERP.Models.Purchases.Purchase_invoices", "Purchase_invoices")
                        .WithMany()
                        .HasForeignKey("Purchase_invoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_invoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchases_discount", b =>
                {
                    b.HasOne("ERP.Models.Purchases.Purchase_invoices", "Purchase_invoices")
                        .WithMany()
                        .HasForeignKey("Purchase_invoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_invoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchases_paymentTerms", b =>
                {
                    b.HasOne("ERP.Models.Purchases.Purchase_invoices", "Purchase_invoices")
                        .WithMany()
                        .HasForeignKey("Purchase_invoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_invoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.Purchases_shippingFees", b =>
                {
                    b.HasOne("ERP.Models.Purchases.Purchase_invoices", "Purchase_invoices")
                        .WithMany()
                        .HasForeignKey("Purchase_invoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_invoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurchasesInvoice_Services", b =>
                {
                    b.HasOne("ERP.Models.Purchases.Purchase_invoices", "Purchase_invoices")
                        .WithMany()
                        .HasForeignKey("Purchase_invoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Service.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_invoices");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurchaseStatus", b =>
                {
                    b.HasOne("ERP.Models.Purchases.Purchase_invoices", "Purchase_invoices")
                        .WithMany()
                        .HasForeignKey("Purchase_invoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_invoices");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Items_in_Refund", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Inventories", "Inventories")
                        .WithMany()
                        .HasForeignKey("InventoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundRequests", "Purchase_RefundRequests")
                        .WithMany()
                        .HasForeignKey("Purchase_RefundRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventories");

                    b.Navigation("ItemVariants");

                    b.Navigation("Purchase_RefundRequests");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundedServices", b =>
                {
                    b.HasOne("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundRequests", "Purchase_RefundRequests")
                        .WithMany()
                        .HasForeignKey("Purchase_RefundRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Service.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_RefundRequests");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundRequests", b =>
                {
                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Refunds_Attachments", b =>
                {
                    b.HasOne("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundRequests", "Purchase_RefundRequests")
                        .WithMany()
                        .HasForeignKey("Purchase_RefundRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_RefundRequests");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Refunds_items_ShippingFees", b =>
                {
                    b.HasOne("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundRequests", "Purchase_RefundRequests")
                        .WithMany()
                        .HasForeignKey("Purchase_RefundRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_RefundRequests");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.Refunds_Notes", b =>
                {
                    b.HasOne("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundRequests", "Purchase_RefundRequests")
                        .WithMany()
                        .HasForeignKey("Purchase_RefundRequestsId");

                    b.Navigation("Purchase_RefundRequests");
                });

            modelBuilder.Entity("ERP.Models.Purchases.PurphaseRefund.RefundsStatus", b =>
                {
                    b.HasOne("ERP.Models.Purchases.PurphaseRefund.Purchase_RefundRequests", "Purchase_RefundRequests")
                        .WithMany()
                        .HasForeignKey("Purchase_RefundRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase_RefundRequests");
                });

            modelBuilder.Entity("ERP.Models.Sales.DiscountsPerItem", b =>
                {
                    b.HasOne("ERP.Models.Sales.ItemsInSalesInvoices", "ItemsInSalesInvoices")
                        .WithMany()
                        .HasForeignKey("ItemsInSalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemsInSalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.DiscountsPerService", b =>
                {
                    b.HasOne("ERP.Models.Sales.ServicesInSalesInvices", "ServicesInSalesInvices")
                        .WithMany()
                        .HasForeignKey("ServicesInSalesInvicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicesInSalesInvices");
                });

            modelBuilder.Entity("ERP.Models.Sales.ItemsInSalesInvoices", b =>
                {
                    b.HasOne("ERP.Models.Inventory.Inventories", "Inventories")
                        .WithMany()
                        .HasForeignKey("InventoriesId");

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId");

                    b.Navigation("Inventories");

                    b.Navigation("ItemVariants");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.RefundedItems", b =>
                {
                    b.HasOne("ERP.Models.CreditNotes.CreditNote_Items", "CreditNote_Items")
                        .WithMany()
                        .HasForeignKey("CreditNote_ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Sales.ItemsInSalesInvoices", "ItemsInSalesInvoices")
                        .WithMany()
                        .HasForeignKey("ItemsInSalesInvoicesId");

                    b.Navigation("CreditNote_Items");

                    b.Navigation("ItemsInSalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.RefundedServices", b =>
                {
                    b.HasOne("ERP.Models.CreditNotes.CreditNote_Services", "CreditNote_Services")
                        .WithMany()
                        .HasForeignKey("CreditNote_ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Sales.ServicesInSalesInvices", "ServicesInSalesInvices")
                        .WithMany()
                        .HasForeignKey("ServicesInSalesInvicesId");

                    b.Navigation("CreditNote_Services");

                    b.Navigation("ServicesInSalesInvices");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("AddedBy_EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_ItemCat", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesCommissions.Commissions", "Commissions")
                        .WithMany()
                        .HasForeignKey("CommissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemSubCategory", "ItemSubCategory")
                        .WithMany()
                        .HasForeignKey("ItemSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commissions");

                    b.Navigation("ItemSubCategory");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_items", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesCommissions.Commissions", "Commissions")
                        .WithMany()
                        .HasForeignKey("CommissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Items.ItemVariants", "ItemVariants")
                        .WithMany()
                        .HasForeignKey("ItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commissions");

                    b.Navigation("ItemVariants");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_Per_employee", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesCommissions.Commissions", "Commissions")
                        .WithMany()
                        .HasForeignKey("CommissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId");

                    b.Navigation("Commissions");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_SerCat", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesCommissions.Commissions", "Commissions")
                        .WithMany()
                        .HasForeignKey("CommissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Service.ServiceSubCategory", "ServiceSubCategory")
                        .WithMany()
                        .HasForeignKey("ServiceSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commissions");

                    b.Navigation("ServiceSubCategory");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.Commissions_Services", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesCommissions.Commissions", "Commissions")
                        .WithMany()
                        .HasForeignKey("CommissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Service.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commissions");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesCommissions.CommissionsNotes", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesCommissions.Commissions", "Commissions")
                        .WithMany()
                        .HasForeignKey("CommissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoice_AutomaticReminders", b =>
                {
                    b.HasOne("ERP.Models.Generals.AutomaticReminders", "AutomaticReminders")
                        .WithMany()
                        .HasForeignKey("AutomaticRemindersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutomaticReminders");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoice_TotalDsicount", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoicePayments", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("CollectedBy_EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.PaymentMethods", "PaymentMethods")
                        .WithMany()
                        .HasForeignKey("PaymentMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Sales.SalesInvoice_PaymentStatus", "SalesInvoice_PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Employees");

                    b.Navigation("PaymentMethods");

                    b.Navigation("SalesInvoice_PaymentStatus");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoicePayments_Attachments", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoicePayments", "SalesInvoicePayments")
                        .WithMany()
                        .HasForeignKey("SalesInvoicePaymentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesInvoicePayments");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoicePayments_Details", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoicePayments", "SalesInvoicePayments")
                        .WithMany()
                        .HasForeignKey("SalesInvoicePaymentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesInvoicePayments");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoicePayments_Notes", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoicePayments", "SalesInvoicePayments")
                        .WithMany()
                        .HasForeignKey("SalesInvoicePaymentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesInvoicePayments");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoices", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId");

                    b.HasOne("ERP.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("COC");
                });

            modelBuilder.Entity("ERP.Models.Sales.SalesInvoices_Attachments", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.ServicesInSalesInvices", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId");

                    b.HasOne("ERP.Models.Service.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesInvoices");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ERP.Models.Sales.Settings.SalesInvoices_CustomFields", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_Per_Service", "Fields_Per_Service")
                        .WithMany()
                        .HasForeignKey("Fields_Per_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_Per_Service");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.Settings.ShippingOptions", b =>
                {
                    b.HasOne("ERP.Models.Generals.TaxSettings", "TaxSettings")
                        .WithMany()
                        .HasForeignKey("TaxSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Sales.ShippingDetails", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("ERP.Models.Sales.Status_For_EachInvoice", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Sales.SalesInvoicesStatus", "SalesInvoicesStatus")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesInvoices");

                    b.Navigation("SalesInvoicesStatus");
                });

            modelBuilder.Entity("ERP.Models.Sales.TaxPer_Item_PerInvoice", b =>
                {
                    b.HasOne("ERP.Models.Sales.ItemsInSalesInvoices", "ItemsInSalesInvoices")
                        .WithMany()
                        .HasForeignKey("ItemsInSalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.TaxSettings", "TaxSettings")
                        .WithMany()
                        .HasForeignKey("TaxSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemsInSalesInvoices");

                    b.Navigation("TaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Sales.TaxPerService_PerInvoice", b =>
                {
                    b.HasOne("ERP.Models.Sales.ServicesInSalesInvices", "ServicesInSalesInvices")
                        .WithMany()
                        .HasForeignKey("ServicesInSalesInvicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.TaxSettings", "TaxSettings")
                        .WithMany()
                        .HasForeignKey("TaxSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicesInSalesInvices");

                    b.Navigation("TaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Sales.Terms_Per_Invoice", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Sales.SalesTerms", "SalesTerms")
                        .WithMany()
                        .HasForeignKey("SalesTermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesInvoices");

                    b.Navigation("SalesTerms");
                });

            modelBuilder.Entity("ERP.Models.Service.Service_CustomFields", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_Per_Service", "Fields_Per_Service")
                        .WithMany()
                        .HasForeignKey("Fields_Per_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Service.Services", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_Per_Service");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ERP.Models.Service.ServiceDescription", b =>
                {
                    b.HasOne("ERP.Models.Service.Services", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ERP.Models.Service.ServiceNotes", b =>
                {
                    b.HasOne("ERP.Models.Service.Services", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ERP.Models.Service.Services", b =>
                {
                    b.HasOne("ERP.Models.Service.ServiceSubCategory", "ServiceSubCategory")
                        .WithMany()
                        .HasForeignKey("ServiceSubCategoryId");

                    b.Navigation("ServiceSubCategory");
                });

            modelBuilder.Entity("ERP.Models.Service.ServiceSubCategory", b =>
                {
                    b.HasOne("ERP.Models.Service.ServiceMainCategory", "ServiceMainCategory")
                        .WithMany()
                        .HasForeignKey("ServiceMainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceMainCategory");
                });

            modelBuilder.Entity("ERP.Models.Service.ServiceTaxSettings", b =>
                {
                    b.HasOne("ERP.Models.Service.Services", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.TaxSettings", "TaxSettings")
                        .WithMany()
                        .HasForeignKey("TaxSettingsId");

                    b.Navigation("Service");

                    b.Navigation("TaxSettings");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscription_AutomaticReminders", b =>
                {
                    b.HasOne("ERP.Models.Generals.AutomaticReminders", "AutomaticReminders")
                        .WithMany()
                        .HasForeignKey("AutomaticRemindersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Subscription.Subscriptions", "Subscriptions")
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutomaticReminders");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscription_Invoices", b =>
                {
                    b.HasOne("ERP.Models.Sales.SalesInvoices", "SalesInvoices")
                        .WithMany()
                        .HasForeignKey("SalesInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Subscription.Subscriptions", "Subscriptions")
                        .WithMany()
                        .HasForeignKey("SubscriptionsId");

                    b.Navigation("SalesInvoices");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscription_Notes", b =>
                {
                    b.HasOne("ERP.Models.Subscription.Subscriptions", "Subscriptions")
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscription_Terms", b =>
                {
                    b.HasOne("ERP.Models.Subscription.Subscriptions", "Subscriptions")
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ERP.Models.Subscription.SubscriptionAttachments", b =>
                {
                    b.HasOne("ERP.Models.Subscription.Subscriptions", "Subscriptions")
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ERP.Models.Subscription.Subscriptions", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COC")
                        .WithMany()
                        .HasForeignKey("COCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("COC");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ERP.Models.Supplier.Supplier_ContactList", b =>
                {
                    b.HasOne("ERP.Models.Supplier.Suppliers", "Suppliers")
                        .WithMany()
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("ERP.Models.Supplier.Supplier_CustomFields", b =>
                {
                    b.HasOne("ERP.Models.CutomFields.Fields_Per_Service", "Fields_Per_Service")
                        .WithMany()
                        .HasForeignKey("Fields_Per_ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Supplier.Suppliers", "Suppliers")
                        .WithMany()
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fields_Per_Service");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("ERP.Models.Supplier.Supplier_notes", b =>
                {
                    b.HasOne("ERP.Models.Supplier.Suppliers", "Suppliers")
                        .WithMany()
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("ERP.Models.Supplier.SupplierAddresses", b =>
                {
                    b.HasOne("ERP.Models.Supplier.Suppliers", "Suppliers")
                        .WithMany()
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("ERP.Models.Supplier.Suppliers", b =>
                {
                    b.HasOne("ERP.Models.Generals.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.BankAccount_Description", b =>
                {
                    b.HasOne("ERP.Models.TreasuriesAndBankAccount.BankAccounts", "BankAccounts")
                        .WithMany()
                        .HasForeignKey("BankAccountsId");

                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("ERP.Models.TreasuriesAndBankAccount.Treasury_description", b =>
                {
                    b.HasOne("ERP.Models.TreasuriesAndBankAccount.Treasuries", "Treasuries")
                        .WithMany()
                        .HasForeignKey("TreasuriesId");

                    b.Navigation("Treasuries");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.Settings.WorkOrdersActions", b =>
                {
                    b.HasOne("ERP.Models.WorkOrder.WorkOrders", "WorkOrders")
                        .WithMany()
                        .HasForeignKey("WorkOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.Settings.WorkOrderStatus", b =>
                {
                    b.HasOne("ERP.Models.WorkOrder.WorkOrders", "WorkOrders")
                        .WithMany()
                        .HasForeignKey("WorkOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrders", b =>
                {
                    b.HasOne("ERP.Models.Generals.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrders_Attachments", b =>
                {
                    b.HasOne("ERP.Models.WorkOrder.WorkOrders", "WorkOrders")
                        .WithMany()
                        .HasForeignKey("WorkOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrders_Description", b =>
                {
                    b.HasOne("ERP.Models.WorkOrder.WorkOrders", "WorkOrders")
                        .WithMany()
                        .HasForeignKey("WorkOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrdersClients", b =>
                {
                    b.HasOne("ERP.Models.COCs.COC", "COCs")
                        .WithMany()
                        .HasForeignKey("COCid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.WorkOrder.WorkOrders", "WorkOrders")
                        .WithMany()
                        .HasForeignKey("WorkOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COCs");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ERP.Models.WorkOrder.WorkOrdersEmployees", b =>
                {
                    b.HasOne("ERP.Models.Employee.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.WorkOrder.WorkOrders", "WorkOrders")
                        .WithMany()
                        .HasForeignKey("WorkOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ERP.Data.Identity.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ERP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ERP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ERP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERP.Data.Identity.ApplicationUserRole", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ERP.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ERP.Models.Branches.BusinessBranches", b =>
                {
                    b.Navigation("Employees_In_Branch");
                });

            modelBuilder.Entity("ERP.Models.COCs.COC", b =>
                {
                    b.Navigation("COC_Contacts");
                });

            modelBuilder.Entity("ERP.Models.COCs.COC_ContactList", b =>
                {
                    b.Navigation("COC_Contacts");
                });

            modelBuilder.Entity("ERP.Models.Employee.Employees", b =>
                {
                    b.Navigation("Department");

                    b.Navigation("EmpAddress");

                    b.Navigation("Employees_In_Branch");

                    b.Navigation("PaperImages");
                });

            modelBuilder.Entity("ERP.Models.Employee.Shifts.EmployeeShifts", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ShiftsTimeDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
